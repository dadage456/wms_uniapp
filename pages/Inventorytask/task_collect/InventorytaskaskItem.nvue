<template>
	<view class="fui-wrap">
		<fui-nav-bar isFixed title="平库盘点采集" >
			<fui-icon name="arrowleft"></fui-icon>
		</fui-nav-bar>
		<view style="padding-top: 105rpx">
			<fui-input
				borderTop
				topLeft
				topRight
				borderBottom
				v-model="scanningContent.text"
				:placeholder="placeholder"
				:focus="focus"
				type="digit"
				clearable
				@confirm="search"
			></fui-input>
		</view>
		<fui-row marginBottom="5rpx">
			<fui-col :span="12">
				<fui-card title="库房:" :tag="storeRoom"></fui-card>
			</fui-col>
			<fui-col :span="12">
				<fui-card title="库位编码:" :tag="storeSite"></fui-card>
			</fui-col>
		</fui-row>

		<fui-row marginBottom="1rpx">
			<fui-col :span="12">
				<fui-card title="物料:" :tag="BarcodeContent.matcode"></fui-card>
			</fui-col>
			<fui-col :span="12">
				<fui-card title="采集数量:" :tag="collectQty"></fui-card>
			</fui-col>
		</fui-row>
		<fui-row marginBottom="1rpx">
			<fui-col :span="12">
				<fui-card title="名称:" :tag="BarcodeContent.matname"></fui-card>
			</fui-col>
			<fui-col :span="12">
				<fui-card title="批次:" :tag="BarcodeContent.batchno"></fui-card>
			</fui-col>
		</fui-row>
		<fui-row marginBottom="1rpx">
			<fui-col :span="24">
				<fui-card title="序列:" :tag="BarcodeContent.sn"></fui-card>
			</fui-col>
		</fui-row>

		<view class="fui-page__bd">
			<fui-tabs :tabs="tabs" center :current="curTab" selectedColor="#FA2209" @change="onChangeTab"></fui-tabs>
		</view>

		<view :class="{ table_hide: curTab == 1 }">
			<!--如果需要初始化时触发 @selectionChange 事件，将属性 initEmitChange 设为true-->
			<fui-table-weex
				ref="table"
				fixed
				height="660"
				stripe
				align="left"
				selection
				ellipsis
				is-drag
				full
				:itemList="detailListView"
				:header="column1"
				@rowClick="rowClick1"
				@select="handleCheckItem"
				@selectAll="handleCheckAll"
			></fui-table-weex>
		</view>
		<view :class="{ table_hide: curTab == 0 }">
			<!--如果需要初始化时触发 @selectionChange 事件，将属性 initEmitChange 设为true-->
			<fui-table-weex
				ref="table"
				fixed
				height="660"
				stripe
				align="left"
				selection
				ellipsis
				is-drag
				full
				:itemList="detailListViewColl"
				:header="column2"
				@select="handleCheckItem2"
				@selectAll="handleCheckAll2"
			></fui-table-weex>
		</view>

		<fui-bottom-navbar background="#F7F8FA" lineColor="#333" :items="options" left="8" @init="init" @click="onClick"></fui-bottom-navbar>
		<!--气泡框组件使用请查看具体文档-->
		<fui-bubble-box
			width="200"
			:size="28"
			direction="top"
			:show="show"
			:triangle="{ left: 100 }"
			:bottom="height"
			:right="10"
			:items="subItems"
			@click="subClick"
			@close="onClose"
		></fui-bubble-box>
	</view>
</template>

<script>
import { toast, showConfirm, tansParams } from '@/utils/common';
import { GetDate, GetTaState, inArray, arrayIntersect, debounce, DatasTime, uuid } from '@/common/util.js';
import { getPmMaterialInfoByQR } from '@/api/system/arriveSign';

import {
	getOutTaskCollitemList,
	GetRoomMatControl,
	GetMatControl,
	getMtlRepertoryByStoresiteNo,
	commitDownShelves,
	getInventoryTaskItem,
	getStoreSiteByRoom,
	commitInventoryInfos
} from '@/api/system/goodsDown';
import storage from '@/utils/storage';

const tabs = [
	{
		name: `任务列表`,
		value: 'taskall'
	},
	{
		name: `正在采集`,
		value: 'extreing'
	}
];

var collectFlg = '';
var matFoundFlg = '';

/* var storeSite = ''; */
var booCheck = true; //是否校验批次
var erpStoreSite = '';
var batchFountFlg = '0';
var booCheck = true; //校验批次
var booCheckAagentCode = true; //校验供应商
//采集结果记录
var matCode = '';
var batchNo = '';
var sn = '';
var pdate = '';
var vdays = '';
var matControlFlag = '';
var strMsg = '';

var protype = '';
var taskId = '';
var siteFlag = 'Y';
var batchFlag = 'Y';
var finishFlag = '';
var workStation = '';

var roomMatControl = '';
var matSendControl = '';
var mtlCheckMode = '';
var erpRoom = '';
var trayNo = '';
var resFlag = '';

var taskComment = '';
var taskNo = '';
var roomTag = '';
var checkType = '';
var siteTable = [];

export default {
	data() {
		return {
			checkedList: [],

			//数据格式二
			options: [
				{
					text: '采集结果',
					color: '#E55D52'
				},
				{
					text: '提交',
					color: '#F37B1D'
				}
			],
			curTab: 0,
			tabs,

			column1: [
				{ prop: 'storesite', label: '库位号', width: 183, sortable: true },
				{ prop: 'collectdataqty', label: '盘库数量' },
				{ prop: 'checkmethod_nm', label: '盘库类型' },
				{ prop: 'checktaskno', label: '任务号', width: 210 },
				{ prop: 'co_checkitemid', label: '任务ID' },
				{ prop: 'storeroomno', label: '库房' }
			],
			column2: [
				{ prop: 'storesite', label: '库位号', width: 183, sortable: true },
				{ prop: 'collectdataqty', label: '盘库数量' },
				{ prop: 'checkmethod_nm', label: '盘库类型' },
				{ prop: 'checktaskno', label: '任务号', width: 210 },
				{ prop: 'co_checkitemid', label: '任务ID' },
				{ prop: 'storeroomno', label: '库房' }
			],
			Step: {
				_2DBarcode: '_2DBarcode',
				Site: 'Site',
				Quantity: 'Quantity'
			},

			CheckType: {
				Site: 'Site',
				Mtl: 'Mtl'
			},
			MtlCheckMode: {
				Mtl: 'Mtl', // 检查物料
				MtlBatch: 'MtlBatch', // 物料+批号
				MtlSite: 'MtlSite', // 物料+库位
				MtlBatchSite: 'MtlBatchSite' // 物料+批号+库位
			},

			placeholder: '请扫描库位',
			//扫描内容
			scanningContent: { text: '' },

			repqty: 0,
			storeSite: '', //采集的库位
			collectQty: 0,

			//查询条件
			checktask: {
				taskComment: '',
				taskNo: '',
				roomTag: '',
				sortType: '',
				sortColumn: '',
				searchKey: ''
			},

			//采集结果
			BarcodeContent: {
				matcode: '', //物料编码
				qty: '', //采集数量
				matname: '', //物料名称
				batchno: '', //批次
				sn: '', //序列
				pdate: '', //生产日期
				vdays: '', //保质期
				seqctrl: '', //控制方式
				id_old: '', //编码方式 新格式，就格式
				materialid: ''
			},
			//查询结果
			detailListView: [],
			detailListViewColl: [],
			dicMtlQty: new Map(), //key: outtaskitemid value: 0:开始采集数  1：本次数量
			dicSeq: new Map(), //key: outtaskitemid value: 0:开始采集数  1：本次数量
			dicInvMtlQty: new Map(),
			dicMtlInfo: new Map(),
			collectList: [],
			stocks: [],
			focus: false,
			storeRoom: ''
		};
	},
	onLoad(options) {
		var _this = this;
		let checkTask = JSON.parse(decodeURIComponent(options.item));

		_this.checktask.taskcomment = checkTask.taskcomment;
		_this.checktask.checktaskno = checkTask.checktaskno;
		_this.checktask.roomTag = '0';
		this.storeRoom = checkTask.storeroomno;

		_this.getList();
		/* uni.$off('scancodedate') */ // 每次进来先 移除全局自定义事件监听器
		uni.$on('scancodedate', function (content) {
			_this.PerformingBarcode(content);
		});
	},
	onUnload() {
		// 移除监听事件
		uni.$off('scancodedate');
	},
	onShow() {
		setTimeout(() => {
			try {
				console.log('进入onshow');
				let updateflag = uni.getStorageSync('up_updateflag');
				if (updateflag == '1') {
					console.log('进入onshow');
					let value22 = uni.getStorageSync('up_inTaskItemList');
					if (value22) {
						this.detailListView = value22;
						this.stocks = uni.getStorageSync('up_stocks');

						uni.setStorage({
							key: 'up_updateflag',
							data: '0', //未修改
							success: function () {
								console.log('采集状态修改标志恢复');
							}
						});
					}
				}
			} catch (e) {
				this.$u.toast(e);
			}
		}, 100);
	},
	onBackPress(options) {
		// 如果是返回按钮，才做执行
		if (options.from === 'backbutton') {
			if (this.stocks.length > 0) {
				uni.showModal({
					title: '提示',
					content: '当前采集记录尚未提交 确定退出采集吗？',
					success: (res) => {
						if (res.confirm) {
							uni.navigateBack();
						}
					}
				});
				// 禁止默认返回
				return true;
			}
		}
	},
	methods: {
		page_back() {
			uni.navigateBack({
				delta: 1
			});
		},
		initCurTab(options) {
			const app = this;
			if (options.dataType) {
				const indextab = app.tabs.findIndex((item) => item.value == options.dataType);
				app.curTab = indextab > -1 ? indextab : 0;
			}
		},
		onChangeTab(tab) {
			const app = this;
			app.curTab = tab.index;

			console.log(this.curTab);
		},

		//导航栏初始化事件
		init(e) {
			this.height = Math.ceil((e.height / e.windowWidth) * 750);
		},
		//导航栏点击事件
		onClick(e) {
			console.log(e);
			if (e.index === 0) {
				this.actionsClick('InventorytaskCollectDetail');
			}
			if (e.index === 1) {
				this.commitButton_Click();
			}
		},

		taskcollAdd(storete) {
			this.detailListViewColl = [];
			let coli = 0;
			let tmpstorete = '';

			if (storete != undefined && storete != null && storete.length != 0) {
				for (coli = 0; coli < this.detailListView.length; coli++) {
					tmpstorete = this.detailListView[coli].storesite;
					if (storete == tmpstorete) {
						this.detailListViewColl.push(this.detailListView[coli]);
					}
				}
			}
			if (this.detailListViewColl.length <= 0) {
				this.curTab = 0;
			} else {
				this.curTab = 1;
			}
		},

		//已接收未完成单据加载
		getList() {
			uni.showLoading({
				title: '加载中'
			});
			getInventoryTaskItem(this.checktask).then((response) => {
				if (response.code == '200') {
					this.detailListView = response.data;
					if (this.detailListView.length > 0) {
						if (this.detailListView[0].checkmethod_nm == '库位') {
							checkType = this.CheckType.Site;
							for (let aa = 0; aa < this.detailListView.length; aa++) {
								if (!this.dicMtlInfo.has(this.detailListView[aa].storesite)) {
									let lsaa = [];
									lsaa[0] = aa;
									lsaa[1] = 0;
									this.dicMtlInfo.set(this.detailListView[aa].storesite, lsaa);
								}
							}
						}
						if (this.detailListView[0].checkmethod_nm == '物料') {
							checkType = this.CheckType.Mtl;
							for (let aa = 0; aa < this.detailListView.length; aa++) {
								if (!this.dicMtlInfo.has(this.detailListView[aa].matcode2)) {
									let lsaa = [];
									lsaa[0] = aa;
									lsaa[1] = 0;
									this.dicMtlInfo.set(this.detailListView[aa].matcode2, lsaa);
								}
							}
						}
					}

					uni.setStorage({
						key: 'up_stocks',
						data: null, //未修改
						success: function () {
							console.log('采集结果初始化');
						}
					});
					uni.setStorage({
						key: 'up_updateflag',
						data: '0',
						success: function () {
							console.log('采集状态修改标志初始化');
						}
					});
					uni.setStorage({
						key: 'up_inTaskItemList',
						data: response.data,
						success: function () {
							console.log('采集任务初始化');
						}
					});
					setTimeout(function () {
						uni.hideLoading();
					}, 100);
					if (this.detailListView.length <= 0) {
						this.$u.toast('当前任务列表没有待处理任务！');
					}
				}
			});
		},
		search(event) {
			console.log('event:' + event);
			this.PerformingBarcode(event.detail.value);
		},

		//进入采集界面
		actionsClick(url, item) {
			setTimeout(() => {
				uni.navigateTo({
					url: url + '?item=' + encodeURIComponent(JSON.stringify(item))
				});
			}, 100);
		},
		//采集内容处理
		async PerformingBarcode(barcode) {
			try {
				var strSiteCode = '';
				var strBatch = '';
				var strMtlCode = '';

				if (barcode == undefined || barcode == null || barcode.length == 0) {
					throw new Error('采集内容为空,请重新采集');
				}
				let currStep = '';
				//采集内容判断
				//物料编码
				if (barcode.includes('MC') > 0) {
					currStep = this.Step._2DBarcode;
					//库位判断
				} else if (barcode.includes('$KW$')) {
					currStep = this.Step.Site;
				}
				//数量
				else if (this.checkIntAndFloat(barcode)) {
					currStep = this.Step.Quantity;
				} else {
					throw new Error('采集内容不合法');
				}

				switch (currStep) {
					case this.Step._2DBarcode:
						var BarcodeContent2 = null;
						//物料条码分析
						let response = await this.getPmMaterialInfoByQR(barcode);
						if (response.code == '200') {
							BarcodeContent2 = response.data;
						}

						if (BarcodeContent2 == undefined || BarcodeContent2 == null || BarcodeContent2.length == 0) {
							this.$set(this.scanningContent, 'text', '');
							throw new Error('物料条码识别出现问题');
						}
						let mtlCode = BarcodeContent2.matcode;

						//二维码新旧格式
						var newmarttask = BarcodeContent2.id_old.toString();
						//物料控制模式 序列还是批次
						var matControl = BarcodeContent2.seqctrl.toString();

						if (checkType != this.CheckType.Site) {
							if (!this.dicMtlInfo.has(mtlCode)) {
								this.$set(this.scanningContent, 'text', '');
								throw new Error('物料【' + mtlCode + '】不在盘点任务清单');
							}
						}
						if (matControl == '0') {
							if (this.dicSeq.has(BarcodeContent2.matcode + '@' + BarcodeContent2.sn)) {
								matCode = '';
								this.$set(this.scanningContent, 'text', '');
								throw new Error('序列号【' + BarcodeContent2.sn + '】不允许重复采集，请确认', BarcodeContent2.matcode + '@' + BarcodeContent2.sn);
							}
							this.BarcodeContent = BarcodeContent2;
							this.BarcodeContent.batchNo = BarcodeContent2.sn;
							this.BarcodeContent.qty = 1;

							batchNo = '';
							sn = '';
							batchNo = BarcodeContent2.sn;
							sn = BarcodeContent2.sn;
							this.collectQty = 1;
						}
						if (matControl == '1' || matControl == '2') {
							batchNo = BarcodeContent2.batchno == undefined || BarcodeContent2.batchno == '' || BarcodeContent2.batchno == null ? '' : BarcodeContent2.batchno;
							sn = '';
						}
						matCode = BarcodeContent2.matcode;
						matControlFlag = matControl;
						this.BarcodeContent = BarcodeContent2;
						this.$set(this.scanningContent, 'text', '');
						break;

					case this.Step.Site:
						var str1 = barcode.toString();
						let sArry = str1.split('$');

						let responseroom = await this.getStoreSiteByRoom(this.storeRoom, sArry[2]);
						if (responseroom.code == '200') {
							let siteList = responseroom.data;
							if (siteList.Length <= 0) {
								this.$set(this.scanningContent, 'text', '');
								throw new Error('库房【' + this.storeRoom + '】下无库位号【' + sArry[2] + '】');
							}
							if (checkType == this.CheckType.Site) {
								if (!this.dicMtlInfo.has(sArry[2])) {
									this.$set(this.scanningContent, 'text', '');
									throw new Error('库位【' + sArry[2] + '】不在盘点任务清单');
								}
							}
						}

						this.storeSite = sArry[2];
						this.$set(this.scanningContent, 'text', '');
						this.taskcollAdd(this.storeSite);
						break;

					case this.Step.Quantity:
						if (sn != undefined && sn != '' && sn != null && sn != undefined) {
							this.$set(this.scanningContent, 'text', '');
							throw new Error('已采集序列号无需采集数量，请扫描二维码');
						}
						this.collectQty = parseFloat(barcode);
						break;

					default:
						break;
				}

				strMsg = this.getPlaceMsg();
				//表示条码都扫描完毕
				if (strMsg == '') {
					let matFlag = matControlFlag;
					let qty = this.collectQty;

					var matCode = this.BarcodeContent.matcode.toString();
					var batchNo = this.BarcodeContent.batchno.toString();
					var matId = this.BarcodeContent.materialid;
					var sn = null;

					matFlag = Number(matFlag);
					if (matFlag == undefined || matFlag == null || matFlag.length == 0) {
						throw new Error('获取物料编码属性失败');
					}
					if (matFlag == 0) {
						sn = this.BarcodeContent.sn.toString();
					}
					if (qty <= 0) {
						throw new Error('采集数量必须大于0');
					}

					let strSite = this.storeSite;
					let strMatCode = this.BarcodeContent.matcode;
					let strSn = this.BarcodeContent.sn;
					let strBatch = this.BarcodeContent.batchno;

					let tmpMat = '';
					let tmpSite = '';
					let invTaskItemid = '';
					let tmp = '';

					if (checkType == this.CheckType.Mtl) {
						tmp = this.BarcodeContent.matcode;
					} else if (checkType == this.CheckType.Site) {
						tmp = this.storeSite;
					} else {
						tmp = this.BarcodeContent.matcode;
					}
					for (let i2 = 0; i2 < this.detailListView.length; i2++) {
						tmpMat = this.detailListView[i2].matcode2.toString(); //物料
						tmpSite = this.detailListView[i2].storesite.toString();
						invTaskItemid = this.detailListView[i2].co_checkitemid.toString();
						if (!(tmp == tmpMat || tmp == tmpSite)) {
							continue;
						}
						if (!this.dicMtlInfo.has(invTaskItemid)) {
							let lsi2 = [];
							lsi2[0] = 0;
							lsi2[1] = 0;
							this.dicMtlInfo.set(invTaskItemid, lsi2);
						}
						let lsi3 = this.dicMtlInfo.get(invTaskItemid);
						lsi3[1] = lsi3[1] + qty;
						this.dicMtlInfo.set(invTaskItemid, lsi3);
						/* this.detailListView[i2].collectdataqty = lsi3[1]; */

						var cc2 = this.detailListView[i2];
						cc2.collectdataqty = lsi3[1];
						this.$set(this.detailListView, i2, cc2);

						if ((invTaskItemid == null || invTaskItemid == '' || invTaskItemid == undefined) && this.detailListView[0].checkmethod_nm == '全盘盘点') {
							invTaskItemid = this.detailListView[i2].co_checkitemid.toString(); //获取明细Id
						}
						if (!(strSn == null || strSn == '' || strSn == undefined) && !this.dicSeq.has(strMatCode + '@' + strSn)) {
							this.dicSeq.set(strMatCode + '@' + strSn, strMatCode + '@' + strSn);
						}

						//添加采集记录;对于采集记录的修改操作统一在采集明细中操作
						this.AddCollectData(strMatCode, strBatch, strSn, qty, this.storeRoom, this.storeSite, matId, invTaskItemid, '');
						this.taskcollAdd(this.storeSite);
						break;
					}

					await this.localSave();
					this.InitializeCollect();
				}
				this.$set(this.scanningContent, 'text', '');
				this.placeholder = this.getPlaceMsg();
			} catch (error) {
				uni.showModal({
					title: '平库盘点采集异常',
					showCancel: false,
					content: error.message
				});
				this.$set(this.scanningContent, 'text', '');
				this.InitializeCollect();
			}
		},

		async GetMatControl(matcode) {
			return new Promise(function (resolve, reject) {
				GetMatControl(matcode).then((response) => {
					resolve(response);
				});
			});
		},

		async GetRoomMatControl(taskId) {
			return new Promise(function (resolve, reject) {
				GetRoomMatControl(taskId).then((response) => {
					resolve(response);
				});
			});
		},

		async CheckSite(siteCode) {
			let response = await this.getStoreSiteByRoom(this.storeRoom, siteCode);
			console.log(response);
			if (response.msg && response.code != '200') {
				this.$u.toast(res.msg);
				return;
			}
			if (response.code == '200') {
				let siteList = response.data;
				if (siteList.Length <= 0) {
					this.$u.toast('库房【' + this.storeRoom + '】下无库位号【' + siteCode + '】');
					return;
				}

				if (siteList[0].isfrozen != '0') {
					this.$u.toast('库位【' + siteCode + '】被锁定或者冻结');
					return;
				}
			}
		},
		async getStoreSiteByRoom(storeRoomNo, storeSiteNo) {
			return new Promise(function (resolve, reject) {
				getStoreSiteByRoom(storeRoomNo, storeSiteNo).then((response) => {
					resolve(response);
				});
			});
		},

		async getMtlRepertoryByStoresiteNo(storeSite, matCode, erp_storeroom, batchno, sn) {
			return new Promise(function (resolve, reject) {
				getMtlRepertoryByStoresiteNo(storeSite, matCode, erp_storeroom, batchno, sn).then((response) => {
					resolve(response);
				});
			});
		},
		async getPmMaterialInfoByQR(barcode) {
			return new Promise(function (resolve, reject) {
				getPmMaterialInfoByQR(barcode).then((response) => {
					resolve(response);
				});
			});
		},
		/// 设定提示信息
		/// </summary>
		/// <param name="msg"></param>
		getPlaceMsg() {
			if (this.storeSite == '' || this.storeSite == null || this.storeSite == undefined) {
				//条码为空 采集条码
				this.focus = false;
				return '请扫描库位';
			}
			if (this.BarcodeContent.matcode == '' || this.BarcodeContent.matcode == null || this.BarcodeContent.matcode == undefined) {
				//条码为空 采集条码
				this.focus = false;
				return '请扫描二维码';
				/* } else if ((this.BarcodeContent.sn == '' || this.BarcodeContent.sn == null || this
							.BarcodeContent.sn == undefined) && (this.collectQty == '' || this.collectQty == null || this.collectQty ==
							undefined || this.collectQty == 0)) */ //肯定是批次  如数量为空
			} else if (this.BarcodeContent.sn == null && this.collectQty == 0) {
				this.focus = true;
				return '请输入数量';
			} else {
				this.focus = false;
				return '';
			}
		},
		/// <summary>
		/// 重新初始采集
		/// </summary>
		InitializeCollect() {
			matCode = null;
			batchNo = null;
			sn = null;
			pdate = null;
			vdays = null;
			this.collectQty = 0;
			this.BarcodeContent = [];
			collectFlg = '';
			matFoundFlg = '';
			booCheck = true; //是否校验批次
			batchFountFlg = '0';
			matControlFlag = '';
			this.focus = false;
		},
		localSave() {
			uni.setStorage({
				key: 'up_inTaskItemList',
				data: this.detailListView,
				success: function () {
					console.log('采集成功后 任务列表保存成功');
				}
			});
			uni.setStorage({
				key: 'up_stocks',
				data: this.stocks,
				success: function () {
					console.log('采集成功后 采集列表保存成功');
				}
			});
		},
		async showConfirm(content) {
			return new Promise(function (resolve, reject) {
				// 一段耗时的异步操作
				uni.showModal({
					title: '操作确认',
					content: content,
					cancelText: '取消',
					confirmText: '确认',
					success: (res) => {
						if (res.confirm) {
							resolve(true); // 数据处理完成
						} else if (res.cancel) {
							console.log('用户点击取消');
							resolve(false);
						}
					}
				});
			});
		},

		async DealQuantity(qty, matFlag) {
			var matCode = this.BarcodeContent.matcode.toString();
			var batchNo = this.BarcodeContent.batchno.toString();
			var matId = this.BarcodeContent.materialid;
			var sn = null;

			matFlag = Number(matFlag);
			if (matFlag == undefined || matFlag == null || matFlag.length == 0) {
				this.$u.toast('获取物料编码属性失败');
			}
			if (matFlag == 0) {
				sn = this.BarcodeContent.sn.toString();
			}
			if (qty <= 0) {
				this.$u.toast('采集数量必须大于0');
			}

			let strSite = this.storeSite;
			let strMatCode = this.BarcodeContent.matcode;
			let strSn = this.BarcodeContent.sn;
			let strBatch = this.BarcodeContent.batchno;

			let tmpMat = '';
			let tmpSite = '';
			let invTaskItemid = '';
			let tmp = '';

			if (checkType == this.CheckType.Mtl) {
				tmp = this.BarcodeContent.matcode;
			} else if (checkType == this.CheckType.Site) {
				tmp = this.storeSite;
			} else {
				tmp = this.BarcodeContent.matcode;
			}
			for (let i2 = 0; i2 < this.detailListView.length; i2++) {
				tmpMat = this.detailListView[i2].matcode.toString(); //物料
				tmpSite = this.detailListView[i2].storesite.toString();
				invTaskItemid = this.detailListView[i2].co_checkitemid.toString();
				if (!(tmp == tmpMat || tmp == tmpSite)) {
					continue;
				}
				if (!this.dicMtlInfo.has(invTaskItemid)) {
					let lsi2 = [];
					lsi2[0] = 0;
					lsi2[1] = 0;
					this.dicMtlQty.set(invTaskItemid, lsi2);
				}
				let lsi3 = this.dicMtlInfo.get(invTaskItemid);
				lsi3[1] = lsi3[1] + collectQty;
				this.dicMtlQty.set(invTaskItemid, lsi3);
				this.detailListView[i2].collectdataqty = lsi3[1];
				if ((invTaskItemid == null || invTaskItemid == '' || invTaskItemid == undefined) && this.detailListView[0].checkmethod_nm == '全盘盘点') {
					invTaskItemid = this.detailListView[i2].co_checkitemid.toString(); //获取明细Id
				}
				if (!(strSn == null || strSn == '' || strSn == undefined) && !this.dicSeq.has(strMatCode + '@' + strSn)) {
					this.dicSeq.set(strMatCode + '@' + strSn, strMatCode + '@' + strSn);
				}
			}
			//添加采集记录;对于采集记录的修改操作统一在采集明细中操作
			this.AddCollectData(strMatCode, strBatch, strSn, collectQty, this.storeRoom, this.storeSite, matId, invTaskItemid, '');
		},

		AddCollectData(matCode, batchNo, sn, collectQty, storeRoom, storeSite, matId, invTaskItemid, trayNo) {
			let stock = {};
			stock.stockid = uuid();
			stock.matcode = matCode;
			stock.batchno = batchNo;
			stock.sn = sn;
			stock.InventoryQty = collectQty; //计划数
			stock.MatId = matId;
			stock.storeRoom = storeRoom;
			stock.storeSite = storeSite;
			stock.InvTaskItemid = invTaskItemid;
			stock.TrayNo = trayNo;
			this.stocks.push(stock);
		},
		commitButton_Click() {
			if (this.stocks.length == 0) {
				uni.showModal({
					title: '平库盘点采集异常',
					showCancel: false,
					content: '本次无采集明细，请确认！'
				});
				return;
			}
			let tmpMat = '';
			let taskQty1 = 0;
			let tmpQty1 = 0;
			let msg = '';
			let tmpStore = '';

			msg += '，请确认是否提交？';
			uni.showModal({
				title: '提交确认',
				content: msg,
				success: (res) => {
					if (res.confirm) {
						let collectStocks = this.stocks;
						let taskcomment = this.checktask.taskcomment;

						let inventoryInfos = [];
						for (let io = 0; io < collectStocks.length; io++) {
							let inventoryInfo = {};
							let upStock = collectStocks[io];

							inventoryInfo.TaskComment = taskcomment;
							inventoryInfo.matCode = upStock.matcode; //物料号
							inventoryInfo.batchNo = upStock.batchno; //批号
							inventoryInfo.sn = upStock.sn; //序列号
							inventoryInfo.collectQty = upStock.InventoryQty; //已采集数量
							inventoryInfo.storeRoomNo = upStock.storeRoom;
							inventoryInfo.storeSiteNo = upStock.storeSite;
							inventoryInfo.invTaskItemid = upStock.InvTaskItemid;
							inventoryInfo.materialId = upStock.MatId;
							inventoryInfos.push(inventoryInfo);
						}
						commitInventoryInfos(inventoryInfos, taskcomment).then((response) => {
							if (response.code == '200') {
								uni.showModal({
									title: '信息提示',
									showCancel: false,
									content: '提交成功'
								});
								uni.setStorage({
									key: 'up_stocks',
									data: null, //未修改
									success: function () {
										console.log('采集结果初始化');
									}
								});
								uni.setStorage({
									key: 'up_updateflag',
									data: '0',
									success: function () {
										console.log('采集状态修改标志初始化');
									}
								});
								uni.setStorage({
									key: 'up_inTaskItemList',
									data: null,
									success: function () {
										console.log('采集任务初始化');
									}
								});
								uni.navigateBack({
									delta: 1
								});
							}
						});
					} else {
						return;
					}
				}
			});
		},
		checkIntAndFloat(source) {
			var regex = /^[0-9]+(\.[0-9]+)?$/g;
			return regex.test(source);
		}
	}
};
</script>

<style lang="scss">
.table_hide {
	width: 100%;
	height: 0rpx;
}
</style>
