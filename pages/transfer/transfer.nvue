<template>
	<view class="fui-wrap">
		<fui-nav-bar isFixed title="平库移库"  @leftClick="page_back">
			<fui-icon name="arrowleft"></fui-icon>
		</fui-nav-bar>
		<view style="padding-top: 125rpx">
			<fui-input
				borderTop
				topLeft
				topRight
				borderBottom
				v-model="scanningContent.text"
				:placeholder="placeholder"
				:focus="focus"
				type="digit"
				clearable
				@confirm="search"
			></fui-input>
		</view>
		<fui-row marginBottom="5rpx">
			<fui-col :span="12">
				<fui-card title="库房:" :tag="storeRoomlabel"></fui-card>
			</fui-col>
			<fui-col :span="12">
				<fui-card title="子库:" :tag="erpStoreRoomLabel"></fui-card>
			</fui-col>
		</fui-row>

		<fui-row marginBottom="1rpx">
			<fui-col :span="12">
				<fui-card title="来源库位" :tag="sourceSiteLabel"></fui-card>
			</fui-col>
			<fui-col :span="12">
				<fui-card title="目标库位:" :tag="targetSiteLabel"></fui-card>
			</fui-col>
		</fui-row>
		<fui-row marginBottom="1rpx">
			<fui-col :span="12">
				<fui-card title="物料:" :tag="matCodeLabel"></fui-card>
			</fui-col>
			<fui-col :span="12">
				<fui-card title="批次:" :tag="batchNoLabel"></fui-card>
			</fui-col>
		</fui-row>
		<fui-row marginBottom="1rpx">
			<fui-col :span="12">
				<fui-card title="序列:" :tag="serialNoLabel"></fui-card>
			</fui-col>
			<fui-col :span="12">
				<fui-card title="数量:" :tag="qtyLabel"></fui-card>
			</fui-col>
		</fui-row>
		<fui-row marginBottom="1rpx">
			<fui-col :span="12">
				<fui-card title="项目号:" :tag="projectNumLabel"></fui-card>
			</fui-col>
			<fui-col :span="12">
				<fui-card title="操作模式:" :tag="rdoMoveMobleLable"></fui-card>
			</fui-col>
		</fui-row>

		<view class="fui-page__bd">
			<fui-tabs :tabs="tabs" center :current="curTab" selectedColor="#FA2209" @change="onChangeTab"></fui-tabs>
		</view>

		<view :class="{ table_hide: curTab == 1 }">
			<!--如果需要初始化时触发 @selectionChange 事件，将属性 initEmitChange 设为true-->
			<fui-table-weex
				ref="table"
				fixed
				height="595"
				stripe
				selection
				ellipsis
				is-drag
				full
				:itemList="detailListView"
				:header="column1"
				@select="handleCheckItem"
			></fui-table-weex>
		</view>
		<view :class="{ table_hide: curTab == 0 }">
			<!--如果需要初始化时触发 @selectionChange 事件，将属性 initEmitChange 设为true-->
			<fui-table-weex ref="table" fixed height="595" stripe selection ellipsis is-drag full :itemList="taskDataGrid" @rowClick="rowClick1" :header="column2"></fui-table-weex>
		</view>

		<fui-bottom-navbar background="#F7F8FA" lineColor="#333" :items="options" left="8" @init="init" @click="onClick"></fui-bottom-navbar>
		<!--气泡框组件使用请查看具体文档-->
		<fui-picker :layer="layer" :options="InOutdt" :linkage="linkage" :show="show_p" @change="change_p" @cancel="cancel_p"></fui-picker>
		<scanCode></scanCode>
	</view>
</template>

<script>
import { toast, showConfirm, tansParams } from '@/utils/common';
import { GetDate, GetTaState, inArray, arrayIntersect, debounce, DatasTime, uuid } from '@/common/util.js';
import { getPmMaterialInfoByQR } from '@/api/system/arriveSign';
import scanCode from '@/components/scan-code/scan-code.vue';
import {
	GetRepertoryBySiteNoMatCode,
	GetRepertoryByStoresiteNoTransfer,
	getStoreSiteByRoom,
	getLSMtlRepertoryByStoresiteNo,
	CommitUpShelves,
	CommitMtlSender,
	getMtlQtyByMtlCode,
	CommitTransfer
} from '@/api/system/goodsUp';
import storage from '@/utils/storage';
const tabs = [
	{
		name: `采集列表`,
		value: 'taskall'
	},
	{
		name: `库存查询`,
		value: 'extreing'
	}
];
//采集结果记录
var matCode = '';
var batchNo = '';
var sn = '';
var pdate = '';
var vdays = '';
var strMsg = '';
var matControlFlag = '';
var dicMtlQty = new Map();
var dicSeq = new Map();

var Step = {
	_2DBarcode: '_2DBarcode',
	SourceSite: 'SourceSite',
	targetSite: 'targetSite',
	Quantity: 'Quantity'
};

export default {
	components: {
		scanCode
	},
	data() {
		return {
			linkage: false,
			show_p: false,
			checkedList: [],
			//数据格式二
			options: [
				{
					text: '操作模式',
					color: '#E55D52'
				},
				{
					text: '删除',
					color: '#F37B1D'
				},
				{
					text: '提交',
					color: '#F37B1D'
				}
			],

			curTab: 0,
			tabs,
			show1: false,
			storeRoomlabel: '',
			erpStoreRoomLabel: '',
			sourceSiteLabel: '',
			targetSiteLabel: '',
			matCodeLabel: '',
			batchNoLabel: '',
			serialNoLabel: '',
			qtyLabel: '',
			projectNumLabel: '',
			rdoMoveMobleLable: '移出',
			InOutdt: [['移入', '移出']],
			taskDataGrid: [],
			column1: [
				{ prop: 'SourceSite', label: '来源库位', width: 200, sortable: true },
				{ prop: 'TargetSite', label: '目标库位', width: 200, sortable: true },
				{ prop: 'MatCode', label: '物料号', width: 180, sortable: true },
				{ prop: 'Batch', label: '批次号', width: 300, sortable: true },
				{ prop: 'Sn', label: '序列号', width: 300, sortable: true },
				{ prop: 'qty', label: '数量', color: '#465CFF' },
				{ prop: 'ErpOwnerCode', label: '供应商', width: 200 },
				{ prop: 'ErpRoom', label: '子库', sortable: true }
			],
			column2: [
				{ prop: 'matcode', label: '物料编码', width: 180, sortable: true },
				{ prop: 'repqty', label: '数量' },
				{ prop: 'batchno', label: '批次号', width: 300, sortable: true },
				{ prop: 'projectNum', label: '项目号', width: 300, sortable: true },
				{ prop: 'storesiteno', label: '货位号', width: 200, sortable: true },
				{ prop: 'erpStoreroom', label: '子库', sortable: true },
				{ prop: 'palletno', label: '托盘号', width: 200, sortable: true },
				{ prop: 'sn', label: '序列号', width: 300, sortable: true },
				{ prop: 'storeroomname', label: '库房' }
			],
			checkedList: [],
			placeholder: '请扫描来源库位',
			//扫描内容
			scanningContent: { text: '' },

			repqty: 0,
			storeSite: '', //采集的库位
			collectQty: 0,
			lbMinQty: '',
			lbDefaultQty: '',

			//采集结果
			BarcodeContent: {
				matcode: '', //物料编码
				qty: '', //采集数量
				matname: '', //物料名称
				batchno: '', //批次
				sn: '', //序列
				seqctrl: '', //控制方式
				id_old: '' //编码方式 新格式，就格式
			},
			//查询结果
			detailListView: [],
			collectList: [],
			stocks: [],
			focus: false,
			inArray,
			checkedIds: [],
			dicMtlInfo: new Map()
		};
	},
	onLoad(options) {
		var _this = this;
		_this.detailListView = [];

		uni.$off('scancodedate');
		uni.$on('scancodedate', function (content) {
			_this.PerformingBarcode(content);
		});
	},
	onBackPress(options) {
		// 如果是返回按钮，才做执行
		if (options.from === 'backbutton') {
			if (this.detailListView.length > 0) {
				uni.showModal({
					title: '提示',
					content: '当前采集记录尚未提交 确定退出采集吗？',
					success: (res) => {
						if (res.confirm) {
							uni.$off('scancodedate');
							uni.reLaunch({
								url: '/pages/index' // 你可以根据需要调整跳转的页面
							});
						}
					}
				});
				// 禁止默认返回
				return true;
			} else {
				uni.$off('scancodedate');
				uni.reLaunch({
					url: '/pages/index' // 你可以根据需要调整跳转的页面
				});
				return true;
			}
		}
	},

	methods: {
		page_back() {
			if (this.detailListView.length > 0) {
				uni.showModal({
					title: '提示',
					content: '当前采集记录尚未提交 确定退出采集吗？',
					success: (res) => {
						if (res.confirm) {
							uni.$off('scancodedate');
							uni.reLaunch({
								url: '/pages/index' // 你可以根据需要调整跳转的页面
							});
						}
					}
				});
			} else {
				uni.$off('scancodedate');
				uni.reLaunch({
					url: '/pages/index' // 你可以根据需要调整跳转的页面
				});
			}
		},
		//导航栏初始化事件
		init(e) {
			this.height = Math.ceil((e.height / e.windowWidth) * 750);
		},
		//导航栏点击事件
		onClick(e) {
			console.log(e);
			if (e.index === 0) {
				this.pickerShow_p();
			}
			if (e.index === 1) {
				this.deleteColl();
			}
			if (e.index === 2) {
				this.commitButton_Click();
			}
		},
		rowClick1(rowItem) {
			this.projectNumLabel = rowItem.item.projectNum;
			this.erpStoreRoomLabel = rowItem.item.erpStoreroom;
		},
		change_p(e) {
			this.show_p = false;
			this.rdoMoveMobleLable = e.text;
		},
		cancel_p() {
			this.show_p = false;
		},
		pickerShow_p() {
			this.show_p = false;
			this.layer = 1;
			this.linkage = false;
			this.items = this.options;

			this.$nextTick(() => {
				setTimeout(() => {
					this.show_p = true;
				}, 50);
			});
		},
		initCurTab(options) {
			const app = this;
			if (options.dataType) {
				const indextab = app.tabs.findIndex((item) => item.value == options.dataType);
				app.curTab = indextab > -1 ? indextab : 0;
			}
		},
		onChangeTab(tab) {
			const app = this;
			app.curTab = tab.index;

			console.log(this.curTab);
		},
		handleCheckAll(selectItem) {
			const { checkedIds, detailListView } = this;
			if (selectItem.is_selected) {
				this.checkedIds = this.detailListView.map((item) => item.itemid);
			} else {
				this.checkedIds = [];
			}
			this.checkedList = this.detailListView.filter((item) => inArray(item.itemid, this.checkedIds));
		},

		handleCheckItem(selectItem) {
			const { checkedIds } = this;
			const index = this.checkedIds.findIndex((id) => id === selectItem.item.itemid);
			if (selectItem.is_selected) {
				if (index <= 0) {
					this.checkedIds.push(selectItem.item.itemid);
				}
			} else {
				if (index > 0) {
					this.checkedIds.splice(index, 1);
				}
			}
			this.checkedList = this.detailListView.filter((item) => inArray(item.itemid, this.checkedIds));
		},

		cancel() {
			this.show1 = false;
		},
		confirm(e) {
			console.log('confirm', e);
			this.show1 = false;
			this.rdoMoveMobleLable = e.value[0];
			this.placeholder = this.getPlaceMsg();
		},
		showPicker() {
			this.show1 = true;
			console.log(this.InOutdt);
		},
		search(event) {
			this.PerformingBarcode(event.detail.value);
		},

		deleteColl() {
			if (this.detailListView.length <= 0) {
				uni.showModal({
					title: '删除异常',
					showCancel: false,
					content: '当前没有采数据采集！'
				});
				return;
			}

			if (this.checkedList.length <= 0) {
				uni.showModal({
					title: '删除异常',
					showCancel: false,
					content: '请至少选择一行记录'
				});
				return;
			}
			showConfirm('是否要执行删除操作?').then((res) => {
				if (res.confirm) {
					for (var cc = 0; cc < this.checkedList.length; cc++) {
						let checkedRow = this.checkedList[cc];
						let id = checkedRow.itemid;
						for (var c1 = 0; c1 < this.detailListView.length; c1++) {
							let detailRow = this.detailListView[c1];
							let tepId = detailRow.itemid;
							if (id == tepId) {
								let strLocation1 = this.detailListView[c1].storesiteno; //货架号
								let strMatCode1 = this.detailListView[c1].matcode; //物料号
								let decMatQty1 = this.detailListView[c1].qty; //数量
								let strKey1 = strMatCode1 + strLocation1;

								if (this.dicMtlInfo.has(strKey1)) {
									this.dicMtlInfo.delete(strKey1);
								}
								if (dicMtlQty.has(strMatCode1)) {
									let tmpQty = dicMtlQty.get(strMatCode1);
									tmpQty -= decMatQty1;

									if (tmpQty <= 0) {
										dicMtlQty.delete(strMatCode1);
									} else {
										dicMtlQty.set(strMatCode1, tmpQty);
									}
								}
								this.detailListView.splice(c1, 1);
								break;
							}
						}
					}
					uni.showModal({
						title: '信息提示',
						showCancel: false,
						content: '删除成功！'
					});
				}
				if (res.cancel) {
					return;
				}
			});
		},
		isnull(item) {
			if (item == undefined || item == null || item.length == 0 || item == '') {
				return true;
			} else {
				return false;
			}
		},

		//采集内容处理
		async PerformingBarcode(barcode) {
			try {
				if (barcode == undefined || barcode == null || barcode.length == 0) {
					throw new Error('采集内容为空,请重新采集!');
				}
				let currStep = '';
				//采集内容判断
				//物料编码
				if (barcode.includes('MC') > 0) {
					currStep = Step._2DBarcode;

					this.taskDataGrid = [];
					this.projectNumLabel = '';
					this.erpStoreRoomLabel = '';

					//库位判断
				} else if (barcode.includes('$KW$')) {
					currStep = Step.Site;

					this.taskDataGrid = [];
					this.projectNumLabel = '';
					this.erpOwnerCodeLabel = '';
					this.erpStoreRoomLabel = '';
					if (this.rdoMoveMobleLable == '移出') {
						currStep = Step.SourceSite;
					}
					//移入模式  来源库位无需维护
					else if (this.rdoMoveMobleLable == '移入') {
						currStep = Step.targetSite;
					} else {
						//正常 如果来源库位为空  来源库位模式
						if (!this.isnull(this.sourceSiteLabel)) {
							currStep = Step.SourceSite;
						} else {
							currStep = Step.targetSite;
						}
					}
				}
				//数量
				else if (this.checkIntAndFloat(barcode)) {
					if (this.taskDataGrid.length == 0 || this.isnull(this.erpStoreRoomLabel)) {
						throw new Error(
							'请您：首先首先根据来源货位【' +
								this.sourceSiteLabel +
								'】物料号【' +
								this.matCodeLabel +
								'】查询的库存信息；然后选择移库记录确认子库与项目号信息；最后在输入数量！'
						);
					} else {
						currStep = Step.Quantity;
					}
				} else {
					throw new Error('采集内容不合法!');
				}

				switch (currStep) {
					//来源库位
					case Step.SourceSite:
						var str1 = barcode.toString();
						let sArry = str1.split('$');

						/* this.CheckSite(sArry[2]); */
						{
							let siteCode = sArry[2];
							if (this.isnull(siteCode)) {
								throw new Error('库位号不能为空，请确认!');
							}
							let response = await this.getStoreSiteByRoom(null, siteCode);
							if (response.code == '200') {
								let siteList = response.data;
								if (siteList.Length <= 0) {
									throw new Error('库位号:【' + siteCode + '】不存在，请确认');
								}
								if (siteList[0].isfrozen != '0') {
									throw new Error('库位【' + siteCode + '】被锁定或者冻结');
								}
								let strStoreRoomNo = siteList[0].storeroomno;

								if (this.isnull(this.storeRoomlabel)) {
									this.storeRoomlabel = strStoreRoomNo;
									this.updateCheck();
								} else {
									if (strStoreRoomNo != this.storeRoomlabel) {
										throw new Error('目标库位【' + siteCode + '】与来源库位【' + this.sourceSiteLabel + '】不属于同一库房请确认');
									}
								}
							}
						}
						this.sourceSiteLabel = sArry[2];
						if (!this.isnull(this.sourceSiteLabel) && !this.isnull(this.matCodeLabel)) {
							this.QueryButton_Click();
						}
						break;
					//目标库位
					case Step.targetSite:
						var str2 = barcode.toString();
						let sArry2 = str2.split('$');

						if (this.sourceSiteLabel == sArry2[2]) {
							throw new Error('扫描的目标库位与来源库位一样，请确认');
						}
						/* this.CheckSite(sArry2[2]); */
						{
							let siteCode = sArry2[2];
							if (this.isnull(siteCode)) {
								throw new Error('库位号不能为空，请确认!');
							}
							let response = await this.getStoreSiteByRoom(null, siteCode);
							if (response.code == '200') {
								let siteList = response.data;
								if (siteList.Length <= 0) {
									throw new Error('库位号:【' + siteCode + '】不存在，请确认');
								}
								if (siteList[0].isfrozen != '0') {
									throw new Error('库位【' + siteCode + '】被锁定或者冻结');
								}
								let strStoreRoomNo = siteList[0].storeroomno;

								if (this.isnull(this.storeRoomlabel)) {
									this.storeRoomlabel = strStoreRoomNo;
									this.updateCheck();
								} else {
									if (strStoreRoomNo != this.storeRoomlabel) {
										throw new Error('目标库位【' + siteCode + '】与来源库位【' + this.sourceSiteLabel + '】不属于同一库房请确认');
									}
								}
							}
						}
						this.targetSiteLabel = sArry2[2];
						break;

					case Step._2DBarcode:
						var BarcodeContent2 = null;
						//物料条码分析
						let response = await this.getPmMaterialInfoByQR(barcode);
						if (response.code == '200') {
							BarcodeContent2 = response.data;
						}

						if (BarcodeContent2 == undefined || BarcodeContent2 == null || BarcodeContent2.length == 0) {
							throw new Error('物料条码识别出现问题!');
						}

						//物料控制模式 序列还是批次
						var matControl = BarcodeContent2.seqctrl.toString();
						var newmarttask = BarcodeContent2.id_old.toString();

						if (matControl == '0') {
							if (dicSeq.has(BarcodeContent2.matcode + '@' + BarcodeContent2.sn)) {
								throw new Error(('序列号【{0}】不允许重复采集，请确认', BarcodeContent2.matcode + '@' + BarcodeContent2.sn));
							}
							this.batchNoLabel = newmarttask == '1' ? BarcodeContent2.batchno : '';
							this.serialNoLabel = BarcodeContent2.sn;
						} else if (matControl == 1 || matControl == 2) {
							this.serialNoLabel = newmarttask == '1' ? BarcodeContent2.sn : '';
							if (this.isnull(this.serialNoLabel)) {
								this.serialNoLabel = '';
							}
							this.batchNoLabel = newmarttask == '1' ? BarcodeContent2.batchno : BarcodeContent2.sn;
						} else {
							throw new Error('物料【' + BarcodeContent2.matcode + '】编码控制维护值维护不合法');
						}

						matControlFlag = matControl;
						this.matCodeLabel = BarcodeContent2.matcode;
						if (!this.isnull(this.sourceSiteLabel) && !this.isnull(this.matCodeLabel)) {
							this.QueryButton_Click();
						}
						this.BarcodeContent = BarcodeContent2;
						break;

					case Step.Quantity:
						this.qtyLabel = parseFloat(barcode);
						break;
					default:
						break;
				}

				strMsg = this.getPlaceMsg();
				//表示条码都扫描完毕
				if (strMsg == '') {
					/* this.DealQuantity(this.qtyLabel); */
					{
						let qty = this.qtyLabel;
						if (this.isnull(matControlFlag)) {
							throw new Error('获取物料编码属性失败');
						}
						if (qty <= 0) {
							throw new Error('采集数量必须大于0');
						}

						let strSourceSite = this.sourceSiteLabel;
						let strTargetSite = this.targetSiteLabel;
						let strMatCode = this.matCodeLabel;
						let strSn = this.serialNoLabel;
						let strBatch = this.batchNoLabel;
						let strErpOwnerCode = '1943';
						let strErpStoreRoom = this.erpStoreRoomLabel;
						let strProjectNum = this.projectNumLabel;
						let strRepQty = this.qtyLabel;
						let strKey = '';
						let RepQty = 0;
						let dtRepertory = [];
						let drCheck = [];

						dtRepertory = await this.GetRepertoryByStoresiteNoTransfer(strSourceSite, strTargetSite);

						if (matControlFlag == '1' || matControlFlag == '2') {
							strKey = strSourceSite + strMatCode + strBatch + strErpStoreRoom + strErpOwnerCode + strProjectNum;
							if (this.isnull(strProjectNum)) {
								for (let i = 0; i < dtRepertory.length; i++) {
									let repertoryi = dtRepertory[i];
									if (repertoryi.storesiteno != strSourceSite) {
										continue;
									}
									if (repertoryi.matcode != strMatCode) {
										continue;
									}
									if (repertoryi.batchno != strBatch) {
										continue;
									}
									if (repertoryi.erpStoreroom != strErpStoreRoom) {
										continue;
									}
									drCheck.push(repertoryi);
									RepQty = RepQty + repertoryi.repqty;
								}
							} else {
								for (let i2 = 0; i2 < dtRepertory.length; i2++) {
									let repertoryi2 = dtRepertory[i2];
									if (repertoryi2.storesiteno != strSourceSite) {
										continue;
									}
									if (repertoryi2.matcode != strMatCode) {
										continue;
									}
									if (repertoryi2.batchno != strBatch) {
										continue;
									}
									if (repertoryi2.erpStoreroom != strErpStoreRoom) {
										continue;
									}
									if (repertoryi2.projectNum != strProjectNum) {
										continue;
									}
									drCheck.push(repertoryi2);
									RepQty = RepQty + repertoryi2.repqty;
								}
							}

							if (drCheck.Length == 0) {
								throw new Error(
									'物料【' +
										strMatCode +
										'】批次【' +
										strBatch +
										'】库位【' +
										strSourceSite +
										'】子库【' +
										strErpStoreRoom +
										'】项目号【' +
										strProjectNum +
										'】不存在，请确认'
								);
							}
						} else {
							strKey = strSourceSite + strMatCode + strSn + strErpStoreRoom + strErpOwnerCode + strProjectNum;
							if (this.isnull(strProjectNum)) {
								for (let i3 = 0; i3 < dtRepertory.length; i3++) {
									let repertoryi3 = dtRepertory[i3];
									if (repertoryi3.storesiteno != strSourceSite) {
										continue;
									}
									if (repertoryi3.matcode != strMatCode) {
										continue;
									}
									if (repertoryi3.batchno != strBatch) {
										continue;
									}
									if (repertoryi3.erpStoreroom != strErpStoreRoom) {
										continue;
									}
									if (repertoryi3.sn != strSn) {
										continue;
									}
									drCheck.push(repertoryi3);
									RepQty = RepQty + repertoryi3.repqty;
								}
							} else {
								for (let i4 = 0; i4 < dtRepertory.length; i4++) {
									let repertoryi4 = dtRepertory[i4];
									if (repertoryi4.storesiteno != strSourceSite) {
										continue;
									}
									if (repertoryi4.matcode != strMatCode) {
										continue;
									}
									if (repertoryi4.batchno != strBatch) {
										continue;
									}
									if (repertoryi4.erpStoreroom != strErpStoreRoom) {
										continue;
									}
									if (repertoryi4.projectNum != strProjectNum) {
										continue;
									}
									if (repertoryi4.sn != strSn) {
										continue;
									}
									drCheck.push(repertoryi4);
									RepQty = RepQty + repertoryi4.repqty;
								}
							}

							if (drCheck.Length == 0) {
								throw new Error(
									'物料【' +
										strMatCode +
										'】批次【' +
										strBatch +
										'】序列【' +
										strSn +
										'】库位【' +
										strSourceSite +
										'】子库【' +
										strErpStoreRoom +
										'】项目号【' +
										strProjectNum +
										'】不存在，请确认'
								);
							}
						}

						let decRepqty = 0;
						if (dicMtlQty.has(strKey)) {
							decRepqty = dicMtlQty.get(strKey);
						}

						if (RepQty - decRepqty < qty) {
							throw new Error(
								'库位【' +
									strSourceSite +
									'】物料【{' +
									strMatCode +
									'】拥有方【' +
									strErpOwnerCode +
									'】项目号【' +
									strProjectNum +
									'】的库存【' +
									(RepQty - decRepqty) +
									'】小于本次移出库存【' +
									qty +
									'】，请确认'
							);
						}

						let strErpRoom = drCheck[0].erpStoreroom;

						//移入模式
						if (this.rdoMoveMobleLable == '移入') {
							drCheck = [];
							for (let i4 = 0; i4 < dtRepertory.length; i4++) {
								let repertoryi4 = dtRepertory[i4];
								if (repertoryi4.storesiteno != strTargetSite) {
									continue;
								}
								if (repertoryi4.matcode != strMatCode) {
									continue;
								}
								if (repertoryi4.erpStoreroom == strErpRoom) {
									continue;
								}
								drCheck.push(repertoryi4);
							}
							if (drCheck.Length > 0) {
								throw new Error('目标库位【' + strTargetSite + '】已存在子库【' + drCheck[0].erpStoreroom + '】的物料【' + strMatCode + '】，请确认');
							}
						}

						if (!this.isnull(strSn) && !dicSeq.has(strMatCode + '@' + strSn)) {
							dicSeq.set(strMatCode + '@' + strSn, strMatCode + '@' + strSn);
						}

						if (!dicMtlQty.has(strKey)) {
							dicMtlQty.set(strKey, qty);
						} else {
							let tmpQty = dicMtlQty.get(strKey);
							tmpQty = tmpQty + qty;
							dicMtlQty.set(strKey, tmpQty);
						}
						let res = {};
						res.itemid = uuid();
						res.SourceSite = strSourceSite;
						res.TargetSite = strTargetSite;
						res.MatCode = strMatCode;
						res.Batch = strBatch;
						res.Sn = strSn;
						res.qty = qty;
						res.ErpOwnerCode = strErpOwnerCode;
						res.ErpRoom = strErpRoom;
						res.ProjectNum = strProjectNum;
						this.detailListView.push(res);
						this.curTab = 0;
					}
					this.InitializeCollect();
				}
				this.$set(this.scanningContent, 'text', '');
				this.placeholder = this.getPlaceMsg();
				console.log('placeholder:' + this.placeholder);
			} catch (error) {
				this.InitializeCollect();
				this.$set(this.scanningContent, 'text', '');
				uni.showModal({
					title: '采集异常',
					showCancel: false,
					content: error.message
				});
			}
		},

		getPlaceMsg() {
			if (this.isnull(this.sourceSiteLabel) && this.rdoMoveMobleLable == '移出') {
				//来源库位为空
				return '请扫描来源库位';
			} else if (this.isnull(this.targetSiteLabel) && this.rdoMoveMobleLable == '移入') {
				//目标库位
				return '请扫描目标库位';
			} else if (this.isnull(this.serialNoLabel) && this.isnull(this.batchNoLabel)) {
				//条码为空 采集条码
				return '请扫描二维码';
			} else if (this.isnull(this.qtyLabel)) {
				//如果序列  数量自动填1
				return '请先查询后输入数量';
			} else {
				return '';
			}
		},
		async QueryButton_Click() {
			this.taskDataGrid = [];
			let storeSiteNo = this.sourceSiteLabel;
			let matCode = this.matCodeLabel;
			let batchNo = this.batchNoLabel;
			if (!this.isnull(this.serialNoLabel)) {
				batchNo = this.serialNoLabel;
			}
			let res = await GetRepertoryBySiteNoMatCode(storeSiteNo, matCode);
			if (res.data.length <= 0) {
				uni.showModal({
					title: '信息提示',
					showCancel: false,
					content: '来源货位没有库存 请检查采集信息'
				});
			}
			this.taskDataGrid = res.data;
			this.curTab = 1;
		},

		updateCheck() {
			this.InitializeCollect();
			if (this.rdoMoveMobleLable == '移出') {
				this.sourceSiteLabel = '';
				this.targetSiteLabel = this.storeRoomlabel + 'MOVESITE';
			} else if (this.rdoMoveMobleLable == '移入') {
				this.sourceSiteLabel = this.storeRoomlabel + 'MOVESITE';
				this.targetSiteLabel = '';
			} else {
				this.storeRoomlabel = '';
				this.sourceSiteLabel = '';
				this.targetSiteLabel = '';
			}
		},
		async getStoreSiteByRoom(storeRoomNo, storeSiteNo) {
			return new Promise(function (resolve, reject) {
				getStoreSiteByRoom(storeRoomNo, storeSiteNo).then((response) => {
					resolve(response);
				});
			});
		},

		async GetMtlQtyByMtlCode(mtlCode, siteNo) {
			return new Promise(function (resolve, reject) {
				getMtlQtyByMtlCode(mtlCode, siteNo).then((response) => {
					resolve(response);
				});
			});
		},

		async GetRepertoryByStoresiteNoTransfer(sourceStoresiteNo, targetStoresiteNo) {
			return new Promise(function (resolve, reject) {
				GetRepertoryByStoresiteNoTransfer(sourceStoresiteNo, targetStoresiteNo).then((response) => {
					resolve(response.data);
				});
			});
		},

		async getMtlRepertoryByStoresiteNo(storeSite, matCode) {
			return new Promise(function (resolve, reject) {
				getLSMtlRepertoryByStoresiteNo(storeSite, matCode).then((response) => {
					resolve(response);
				});
			});
		},
		async GetRepertoryBySiteNoMatCode(storeSite, matCode) {
			return new Promise(function (resolve, reject) {
				GetRepertoryBySiteNoMatCode(storeSite, matCode).then((response) => {
					resolve(response);
				});
			});
		},
		async getPmMaterialInfoByQR(barcode) {
			return new Promise(function (resolve, reject) {
				getPmMaterialInfoByQR(barcode).then((response) => {
					resolve(response);
				});
			});
		},
		/// <summary>
		/// 重新初始采集
		/// </summary>
		InitializeCollect() {
			this.matCodeLabel = '';
			this.batchNoLabel = '';
			this.serialNoLabel = '';
			this.qtyLabel = '';
			this.taskDataGrid = [];
			this.projectNumLabel = '';
			this.erpOwnerCodeLabel = '';
			this.erpStoreRoomLabel = '';
		},
		async showConfirm(content) {
			return new Promise(function (resolve, reject) {
				// 一段耗时的异步操作
				uni.showModal({
					title: '操作确认',
					content: content,
					cancelText: '取消',
					confirmText: '确认',
					success: (res) => {
						if (res.confirm) {
							resolve(true); // 数据处理完成
						} else if (res.cancel) {
							console.log('用户点击取消');
							resolve(false);
						}
					}
				});
			});
		},

		commitButton_Click() {
			try {
				if (this.detailListView.length == 0) {
					throw new Error('本次无采集明细，请确认！');
				}

				uni.showModal({
					title: '提交确认',
					content: '请确认是否提交？',
					success: (res) => {
						if (res.confirm) {
							uni.showLoading({
								title: '加载中'
							});

							let dicSite = new Map();
							let filter = '';
							let strSite = '';
							var transferInfos = [];

							let collectStocks = this.detailListView;
							for (let io = 0; io < collectStocks.length; io++) {
								let col = collectStocks[io];
								strSite = col.SourceSite;
								if (!dicSite.has(strSite)) {
									dicSite.set(strSite, strSite);
									/* filter += ",'" + strSite + "'"; */
									filter += ',' + strSite + '';
									console.log('filter1:' + filter);
								}

								let transferInfo = {};
								transferInfo.inSite = col.TargetSite; //目标库位
								transferInfo.outSite = strSite; //源库位
								transferInfo.materialCode = col.MatCode; //物料代码
								transferInfo.batchNo = col.Batch; //批号
								transferInfo.sn = col.Sn; //物料SN
								transferInfo.qty = col.qty; //数量
								transferInfo.moveDesc = '';
								transferInfo.supplier = col.ErpOwnerCode; //供应商
								transferInfo.erpRoom = col.ErpRoom; //子库
								transferInfo.projectNum = col.ProjectNum; //项目号
								transferInfos.push(transferInfo);
							}
							if (!this.isnull(filter)) {
								console.log('filter2:' + filter);
								filter = filter.substr(1, filter.length);
								console.log('filter3:' + filter);
							}
							CommitTransfer(transferInfos, filter).then((response) => {
								if (response.code == '200') {
									this.storeRoomlabel = '';
									this.sourceSiteLabel = '';
									this.targetSiteLabel = '';
									dicSeq = new Map();
									matControlFlag = '';

									dicMtlQty = new Map();
									this.placeholder = '请扫描来源库位：';
									this.detailListView = [];
									setTimeout(function () {
										uni.hideLoading();
									}, 100);
									this.InitializeCollect();

									uni.showModal({
										title: '信息提示',
										showCancel: false,
										content: '提交成功'
									});
								}
							});
						} else {
							return;
						}
					}
				});
			} catch (error) {
				uni.showModal({
					title: '采集异常',
					showCancel: false,
					content: error.message
				});
			}
		},
		checkIntAndFloat(source) {
			var regex = /^[0-9]+(\.[0-9]+)?$/g;
			return regex.test(source);
		}
	}
};
</script>

<style lang="scss">
.table_hide {
	width: 100%;
	height: 0rpx;
}
</style>
