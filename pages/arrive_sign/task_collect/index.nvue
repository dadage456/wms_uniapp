<template>
	<view class="fui-wrap">
		<fui-nav-bar isFixed title="到货签收采集" @leftClick="page_back">
			<fui-icon name="arrowleft"></fui-icon>
		</fui-nav-bar>

		<view style="padding-top: 105rpx">
			<fui-input
				borderTop
				topLeft
				topRight
				borderBottom
				v-model="scanningContent.text"
				:placeholder="placeholder"
				:focus="focus"
				type="digit"
				clearable
				@confirm="search"
				@change="qtychange"
			></fui-input>
		</view>
		<fui-row marginBottom="5rpx">
			<fui-col :span="12">
				<fui-card title="物料编码:" :tag="arrivalsDetailColl.matcode"></fui-card>
			</fui-col>
			<fui-col :span="12">
				<fui-card title="采集数量:" :tag="arrivalsDetailColl.qty"></fui-card>
			</fui-col>
		</fui-row>

		<fui-row marginBottom="1rpx">
			<fui-col :span="12">
				<fui-card title="物料名称:" :tag="arrivalsDetailColl.matname"></fui-card>
			</fui-col>
			<fui-col :span="12">
				<fui-card title="批次:" :tag="arrivalsDetailColl.batchno"></fui-card>
			</fui-col>
		</fui-row>
		<fui-row marginBottom="1rpx">
			<fui-col :span="12">
				<fui-card title="序列:" :tag="arrivalsDetailColl.sn"></fui-card>
			</fui-col>
			<fui-col :span="12">
				<fui-card title="生产日期:" :tag="arrivalsDetailColl.pdate"></fui-card>
			</fui-col>
		</fui-row>
		<fui-row marginBottom="1rpx">
			<fui-col :span="24">
				<fui-card title="有效期" :tag="arrivalsDetailColl.vdays"></fui-card>
			</fui-col>
		</fui-row>

		<view class="fui-page__bd">
			<fui-tabs :tabs="tabs" center :current="curTab" selectedColor="#FA2209" @change="onChangeTab"></fui-tabs>
		</view>

		<view :class="{ table_hide: curTab == 1 }">
			<!--如果需要初始化时触发 @selectionChange 事件，将属性 initEmitChange 设为true-->
			<fui-table-weex
				ref="table"
				fixed
				height="665"
				stripe
				align="left"
				selection
				ellipsis
				is-drag
				full
				:itemList="detailListView"
				:header="column1"
				@rowClick="rowClick1"
			></fui-table-weex>
		</view>
		<view :class="{ table_hide: curTab == 0 }">
			<!--如果需要初始化时触发 @selectionChange 事件，将属性 initEmitChange 设为true-->
			<fui-table-weex
				ref="table"
				fixed
				height="665"
				stripe
				align="left"
				selection
				ellipsis
				is-drag
				full
				:itemList="detailListViewColl"
				:header="column2"
				@selectionChange="change"
			></fui-table-weex>
		</view>

		<fui-bottom-navbar background="#F7F8FA" lineColor="#333" :items="options" left="8" @init="init" @click="onClick"></fui-bottom-navbar>
		<!--气泡框组件使用请查看具体文档-->
		<fui-bubble-box
			width="200"
			:size="28"
			direction="top"
			:show="show"
			:triangle="{ left: 100 }"
			:bottom="height"
			:right="10"
			:items="subItems"
			@click="subClick"
			@close="onClose"
		></fui-bubble-box>
		<scanCode></scanCode>
	</view>
</template>
<script>
import { toast, showConfirm, tansParams } from '@/utils/common';
import { GetDate, GetTaState, inArray, arrayIntersect, debounce, DatasTime, uuid } from '@/common/util.js';
import { getArriveSignDetailList, getPmMaterialInfoByQR, CommitSignShelves } from '@/api/system/arriveSign';
import { login } from '@/api/login';
import storage from '@/utils/storage';
import scanCode from '@/components/scan-code/scan-code.vue';

const tabs = [
	{
		name: `任务列表`,
		value: 'taskall'
	},
	{
		name: `正在采集`,
		value: 'extreing'
	}
];
var collectFlg = '';
var matFoundFlg = '';
var booCheck = true; //是否校验批次
var storeRoom = ''; //子库
var batchFountFlg = '0';
var booCheck = true; //校验批次
var booCheckAagentCode = true; //校验供应商
//采集结果记录
var matCode = '';
var batchNo = '';
var sn = '';
var pdate = '';
var vdays = '';
var collectQty = 0;
var matControlFlag = '';
var strMsg = '';
export default {
	components: {
		scanCode
	},
	data() {
		return {
			options: [
				{
					text: '采集结果',
					color: '#E55D52'
				},
				{
					text: '提交',
					color: '#F37B1D'
				}
			],
			height: 100,
			show: false,

			column1: [
				{
					prop: 'matcode',
					label: '物料编码',
					width: 170,
					sortable: true
				},
				{
					prop: 'qty',
					label: '任务数量',
					width: 100
				},
				{
					prop: 'goodqty',
					label: '采集数量',
					width: 100,
					color: '#465CFF'
				},
				{
					prop: 'batchno',
					label: '批次',
					width: 300,
					sortable: true
				},
				{
					prop: 'sn',
					label: '序列',
					width: 300,
					sortable: true
				},
				{
					prop: 'subinventoryCode',
					label: '子库'
				},
				{
					prop: 'posnr',
					label: 'SAP行号',
					sortable: true
				},
				{
					prop: 'matname',
					label: '物料名称',
					width: 600
				},

				{
					prop: 'parname',
					label: '供应商',
					width: 400
				},
				{
					prop: 'matcodecontrol',
					label: '控制属性'
				},
				{
					prop: 'orderno',
					label: '装箱单号',
					width: 310
				},
				{
					prop: 'arrivalsBillno',
					label: '到货单号',
					width: 270
				}
			],

			column2: [
				{
					prop: 'matcode',
					label: '物料编码',
					width: 170,
					sortable: true
				},
				{
					prop: 'qty',
					label: '任务数量',
					width: 130
				},
				{
					prop: 'goodqty',
					label: '采集数量',
					width: 130,
					color: '#465CFF'
				},
				{
					prop: 'batchno',
					label: '批次',
					width: 300,
					sortable: true
				},
				{
					prop: 'sn',
					label: '序列',
					width: 350,
					sortable: true
				},
				{
					prop: 'subinventoryCode',
					label: '子库'
				},
				{
					prop: 'posnr',
					label: 'SAP行号',
					sortable: true
				},
				{
					prop: 'matname',
					label: '物料名称',
					width: 600
				},

				{
					prop: 'parname',
					label: '供应商',
					width: 400
				},
				{
					prop: 'matcodecontrol',
					label: '控制属性'
				},
				{
					prop: 'orderno',
					label: '装箱单号',
					width: 330
				},
				{
					prop: 'arrivalsBillno',
					label: '到货单号',
					width: 270
				}
			],

			inArray,
			checkedIds: [],
			curTab: 0,
			tabs,
			Step: {
				_2DBarcode: '_2DBarcode',
				Site: 'Site',
				Quantity: 'Quantity'
			},
			placeholder: '请扫描物料二维码',
			//扫描内容
			scanningContent: { text: '' },
			//查询条件
			arrivalsDetailBill: {
				arrivalsBillid: '',
				sortType: '',
				sortColumn: '',
				searchKey: ''
			},
			//采集结果
			arrivalsDetailColl: {
				matcode: '', //物料编码
				qty: '', //采集数量
				matname: '', //物料名称
				batchno: '', //批次
				sn: '', //序列
				pdate: '', //生产日期
				vdays: '', //保质期
				seqctrl: '', //控制方式
				id_old: '' //编码方式 新格式，就格式
			},
			//查询结果
			detailListView: [],
			detailListViewColl: [],

			dicMtlQty: new Map(), //key: intaskitemid value: 0:开始采集数  1：本次数量
			dicSeq: new Map(), //key: intaskitemid value: 0:开始采集数  1：本次数量
			collectList: [],
			stocks: [],
			focus: false
		};
	},
	onLoad(options) {
		var _this = this;
		let ass = JSON.parse(decodeURIComponent(options.item));
		_this.arrivalsDetailBill.arrivalsBillid = ass.arrivalsBillid;
		_this.getList();

		uni.$off('scancodedate'); // 每次进来先 移除全局自定义事件监听器
		uni.$on('scancodedate', function (content) {
			_this.PerformingBarcode(content);
		});
	},
	onBackPress(options) {
		// 如果是返回按钮，才做执行
		if (options.from === 'backbutton') {
			if (this.stocks.length > 0) {
				uni.showModal({
					title: '提示',
					content: '当前采集记录尚未提交 确定退出采集吗？',
					success: (res) => {
						if (res.confirm) {
							uni.$off('scancodedate');
							uni.reLaunch({
								url: '/pages/arrive_sign/index' // 你可以根据需要调整跳转的页面
							});
						}
					}
				});
				// 禁止默认返回
				return true;
			} else {
				uni.$off('scancodedate');
				uni.reLaunch({
					url: '/pages/arrive_sign/index' // 你可以根据需要调整跳转的页面
				});
				return true;
			}
		}
	},
	onShow() {
		setTimeout(() => {
			try {
				let updateflag = uni.getStorageSync('updateflag');
				if (updateflag == '1') {
					let value22 = uni.getStorageSync('SignDetailList');
					if (value22) {
						this.detailListView = value22;
						this.stocks = uni.getStorageSync('stocks');
						this.taskcollAdd(matCode);
						uni.setStorage({
							key: 'updateflag',
							data: '0', //未修改
							success: function () {
								//console.log('采集状态修改标志恢复');
							}
						});
					}
				}
			} catch (e) {
				uni.showModal({
					title: '采集异常',
					showCancel: false,
					content: e
				});
			}
		}, 100);
	},
	methods: {
		page_back() {
			if (this.stocks.length > 0) {
				uni.showModal({
					title: '提示',
					content: '当前采集记录尚未提交 确定退出采集吗？',
					success: (res) => {
						if (res.confirm) {
							uni.$off('scancodedate');
							uni.reLaunch({
								url: '/pages/arrive_sign/index' // 你可以根据需要调整跳转的页面
							});
						}
					}
				});
			} else {
				uni.$off('scancodedate');
				uni.reLaunch({
					url: '/pages/arrive_sign/index' // 你可以根据需要调整跳转的页面
				});
			}
		},
		initCurTab(options) {
			const app = this;
			if (options.dataType) {
				const indextab = app.tabs.findIndex((item) => item.value == options.dataType);
				app.curTab = indextab > -1 ? indextab : 0;
			}
		},
		onChangeTab(tab) {
			const app = this;
			app.curTab = tab.index;

			//console.log(this.curTab);
		},
		//进入采集结果界面
		taskcollAdd(matcode, storete) {
			this.detailListViewColl = [];
			let coli = 0;
			let tmpMatcode = '';
			if (matcode != undefined && matcode != null && matcode.length != 0) {
				for (coli = 0; coli < this.detailListView.length; coli++) {
					tmpMatcode = this.detailListView[coli].matcode;
					if (tmpMatcode == matcode) {
						this.detailListViewColl.push(this.detailListView[coli]);
					}
				}
			}
			this.curTab = 1;
		},

		//已接收未完成单据加载
		getList() {
			uni.showLoading({
				title: '加载中'
			});

			getArriveSignDetailList(this.arrivalsDetailBill).then((response) => {
				if (response.code == '200') {
					this.detailListView = response.data.rows;
					uni.setStorage({
						key: 'stocks',
						data: null, //未修改
						success: function () {
							//console.log('采集结果初始化');
						}
					});
					uni.setStorage({
						key: 'updateflag',
						data: '0',
						success: function () {
							//console.log('采集状态修改标志初始化');
						}
					});
					uni.setStorage({
						key: 'SignDetailList',
						data: response.data,
						success: function () {
							console.log('采集任务初始化');
						}
					});

					setTimeout(function () {
						uni.hideLoading();
					}, 200);

					if (this.detailListView.length <= 0) {
						uni.showModal({
							title: '采集异常',
							showCancel: false,
							content: '当前任务列表没有待处理任务！'
						});
						this.$set(this.scanningContent, 'text', '');
						return;
					}
				}
			});
		},
		search(event) {
			this.PerformingBarcode(event.detail.value);
		},

		//采集内容处理
		async PerformingBarcode(barcode) {
			try {
				if (barcode == undefined || barcode == null || barcode.length == 0) {
					this.$set(this.scanningContent, 'text', '');
					throw new Error('采集内容为空,请重新采集');
				}
				let currStep = '';
				//采集内容判断
				//物料编码
				if (barcode.includes('MC') > 0) {
					currStep = this.Step._2DBarcode;
				}
				//数量
				else if (this.checkIntAndFloat(barcode)) {
					currStep = this.Step.Quantity;
				} else {
					this.$set(this.scanningContent, 'text', '');
					throw new Error('采集内容不合法');
				}

				switch (currStep) {
					case this.Step._2DBarcode:
						var arrivalsDetailColl2 = null;
						//物料条码分析
						let response = await this.getPmMaterialInfoByQR(barcode);
						if (response.code == '200') {
							arrivalsDetailColl2 = response.data;
						}
						this.taskcollAdd(arrivalsDetailColl2.matcode);
						//二维码新旧格式
						var newmarttask = arrivalsDetailColl2.id_old.toString();
						//物料控制模式 序列还是批次
						var matControl = arrivalsDetailColl2.seqctrl.toString();

						if (arrivalsDetailColl2 == undefined || arrivalsDetailColl2 == null || arrivalsDetailColl2.length == 0) {
							this.$set(this.scanningContent, 'text', '');
							throw new Error('物料条码识别出现问题');
						}

						if (newmarttask == '0') {
							//旧条码格式 做物料检查，不合格将返回
							this.CheckMat(arrivalsDetailColl2.matcode, matControl, arrivalsDetailColl2.sn);
							if (matControl == '0') {
								if (arrivalsDetailColl2.SN == undefined || arrivalsDetailColl2.SN == null) {
									this.$set(this.scanningContent, 'text', '');
									throw new Error('物料" + arrivalsDetailColl2.matcode + "序列号不能为空');
								}

								if (this.dicSeq.has(arrivalsDetailColl2.matcode + '@' + arrivalsDetailColl2.sn)) {
									matCode = '';
									this.$set(this.scanningContent, 'text', '');
									throw new Error('物料' + arrivalsDetailColl2.matcode + ':序列号【' + arrivalsDetailColl2.sn + '】不允许重复采集，请确认');
								}

								this.arrivalsDetailColl = arrivalsDetailColl2;
								this.arrivalsDetailColl.batchNo = arrivalsDetailColl2.sn;
								this.arrivalsDetailColl.qty = 1;

								batchNo = '';
								sn = '';
								batchNo = arrivalsDetailColl2.sn;
								sn = arrivalsDetailColl2.sn;
								collectQty = 1;
							}
							if (matControl == '1' || matControl == '2') {
								if (arrivalsDetailColl2.sn == undefined || arrivalsDetailColl2.sn == null) {
									this.$set(this.scanningContent, 'text', '');
									throw new Error('物料' + arrivalsDetailColl2.matcode + '批次号不能为空');
								}
								sn = '';
								batchNo = '';
								batchNo = arrivalsDetailColl2.sn;
							} else {
								this.$set(this.scanningContent, 'text', '');
								throw new Error('物料' + arrivalsDetailColl2.matcode + '编码控制维护值维护不合法');
							}
						} else {
							let barcode = arrivalsDetailColl2.matcode;
							let BatchNo = arrivalsDetailColl2.batchno;
							let sn = arrivalsDetailColl2.sn;
							matFoundFlg = '0';
							batchFountFlg = '0';
							collectFlg = '0';
							let result = null;

							for (let i = 0; i < this.detailListView.length; i++) {
								let tmpMat = this.detailListView[i].matcode;
								if (matControl == '0') {
									if (booCheck) {
										if (tmpMat == barcode) {
											storeRoom = this.detailListView[i].subinventoryCode.toString();
											matFoundFlg = '1';
											break;
										}
									} else {
										if (tmpMat == barcode) {
											storeRoom = this.detailListView[i].subinventoryCode.toString();
											matFoundFlg = '1';
											break;
										}
									}
								} else if (matControl == '1' || matControl == '2') {
									if (booCheck) {
										if (tmpMat == barcode) {
											storeRoom = this.detailListView[i].subinventoryCode.toString();
											matFoundFlg = '1';
											break;
										}
									} else {
										if (tmpMat == barcode) {
											storeRoom = this.detailListView[i].subinventoryCode.toString();
											matFoundFlg = '1';
											break;
										}
									}
								}
							}
							if (matFoundFlg == '1') {
								for (let i = 0; i < this.detailListView.length; i++) {
									let tmpMat3 = this.detailListView[i].matcode;
									if (matControl == '0') {
										if (booCheck) {
											let tmpSn3 = this.detailListView[i].sn; //序列
											let tmpBatch3 = this.detailListView[i].batchno.toString();
											if (tmpMat3 == barcode && tmpSn3 == sn && tmpBatch3 == BatchNo) {
												storeRoom = this.detailListView[i].subinventoryCode.toString();
												batchFountFlg = '1';
												break;
											}
										} else {
											if (tmpMat3 == barcode) {
												storeRoom = this.detailListView[i].subinventoryCode.toString();
												batchFountFlg = '1';
												break;
											}
										}
									} else if (matControl == '1' || matControl == '2') {
										if (booCheck) {
											let tmpBatch4 = this.detailListView[i].batchno.toString();
											if (tmpMat3 == barcode && tmpBatch4 == BatchNo) {
												storeRoom = this.detailListView[i].subinventoryCode.toString();
												batchFountFlg = '1';
												break;
											}
										} else {
											if (tmpMat3 == barcode) {
												storeRoom = this.detailListView[i].subinventoryCode.toString();
												batchFountFlg = '1';
												break;
											}
										}
									}
								}
							}
							if (matFoundFlg == '0') {
								this.$set(this.scanningContent, 'text', '');
								throw new Error('任务明细中物料【' + barcode + '】不存在');
							}

							if (matFoundFlg == '1' && batchFountFlg == '0') {
								if (matControl == '0') {
									//0单件(序列)控制，1批次控制，2无控制
									/* result = await this.showConfirm(
										'任务明细中物料【' + barcode + '】物料存在，但采集的批号【' + BatchNo + '】序列【' + sn + '】与任务不匹配，是否采集?'
									);
									if (result) {
										collectFlg = '1'; //批次序列不匹配下 采集
									} else {
										this.$set(this.scanningContent, 'text', '');
										storeRoom = '';
										return;
									} */

									throw new Error('任务明细中物料【' + barcode + '】物料存在，但采集的批号【' + BatchNo + '】序列【' + sn + '】与任务不匹配，不能采集');
								} else {
									/* result = await this.showConfirm('任务明细中物料【' + barcode + '】物料存在，但采集的批号【' + BatchNo + '】与任务不匹配，是否采集?');

									if (result) {
										collectFlg = '1'; //批次序列不匹配下 采集
										if (matFoundFlg == '1' && batchFountFlg == '1') {
											collectFlg = '0'; //批次序列匹配下正常采集
										}
									} else {
										this.$set(this.scanningContent, 'text', '');
										storeRoom = '';
										return;
									} */

									throw new Error('任务明细中物料【' + barcode + '】物料存在，但采集的批号【' + BatchNo + '】与任务不匹配，不能采集');
								}
							}

							if (matControl == '0') {
								sn = '';
								batchNo = '';

								this.arrivalsDetailColl = arrivalsDetailColl2;
								this.arrivalsDetailColl.qty = 1;

								batchNo = arrivalsDetailColl2.batchno;
								sn = arrivalsDetailColl2.sn;
								collectQty = 1;

								if (sn == undefined || sn == null || sn == '') {
									this.$set(this.scanningContent, 'text', '');
									throw new Error('物料' + arrivalsDetailColl2.matcode + '序列号不能为空');
								}

								if (batchNo == undefined || batchNo == null || batchNo == '') {
									this.$set(this.scanningContent, 'text', '');
									throw new Error('物料' + arrivalsDetailColl2.matcode + '批次号不能为空');
								}

								console.log('dicSeq' + this.dicSeq);
								if (this.dicSeq.has(arrivalsDetailColl2.matcode + '@' + arrivalsDetailColl2.sn)) {
									matCode = '';
									this.$set(this.scanningContent, 'text', '');
									throw new Error('物料' + arrivalsDetailColl2.matcode + ':序列号【' + arrivalsDetailColl2.sn + '】不允许重复采集，请确认1');
								}
							} else {
								batchNo =
									arrivalsDetailColl2.batchno == undefined || arrivalsDetailColl2.batchno == '' || arrivalsDetailColl2.batchno == null
										? ''
										: arrivalsDetailColl2.batchno;

								if (batchNo == undefined || batchNo == null || batchNo == '') {
									this.$set(this.scanningContent, 'text', '');
									throw new Error('物料' + arrivalsDetailColl2.matcode + '批次号不能为空');
								}
							}
							matCode = arrivalsDetailColl2.matcode;
							matControlFlag = matControl;

							pdate = arrivalsDetailColl2.pdate; //生产日期
							vdays = arrivalsDetailColl2.vdays; //有效期天数

							if (this.arrivalsDetailColl.qty > 0) {
								arrivalsDetailColl2.qty = this.arrivalsDetailColl.qty;
							}
							this.arrivalsDetailColl = arrivalsDetailColl2;
						}
						break;

					case this.Step.Quantity:
						if (sn != undefined && sn != '' && sn != null && sn != undefined) {
							this.$set(this.scanningContent, 'text', '');
							throw new Error('已采集序列号无需采集数量，请扫描二维码');
						}
						collectQty = parseFloat(barcode);
						this.arrivalsDetailColl.qty = collectQty;
						break;

					default:
						break;
				}

				strMsg = this.getPlaceMsg();
				//表示条码都扫描完毕
				if (strMsg == '') {
					/* await this.DealQuantity(collectQty, matControlFlag); */
					let qty = collectQty;
					let matFlag = matControlFlag;

					var matCode = this.arrivalsDetailColl.matcode.toString();
					var batchNo = this.arrivalsDetailColl.batchno.toString();
					var sn = null;

					matFlag = Number(matFlag);
					if (matFlag == undefined || matFlag == null || matFlag.length == 0) {
						this.$set(this.scanningContent, 'text', '');
						throw new Error('获取物料编码属性失败');
					}
					if (matFlag == 0) {
						sn = this.arrivalsDetailColl.sn.toString();
					}
					if (qty <= 0) {
						this.$set(this.scanningContent, 'text', '');
						throw new Error('采集数量必须大于0');
					}

					var exsitFlag = false;
					var taskQty = 0;
					var tmpQty = 0;
					var tmpNotmatQty = 0;
					var qiangzhicajiFlag = 0;

					var tatalTaskQty = 0; //当前物料总计划数
					var tatalTmpQty = 0; //当前物料总扫描数
					var tatalNotmatQty = 0; //当前物料总扫描数
					var inTaskItemid = '';

					/* var booCheck = true; */

					//统计当前物料总扫描数和总计划数
					for (let i2 = 0; i2 < this.detailListView.length; i2++) {
						//console.log('detailListView[' + i2 + '].matcode:' + this.detailListView[i2].matcode);
						let tmpMat = this.detailListView[i2].matcode.toString(); //物料
						if (tmpMat != matCode) {
							continue; //如果物料不是当前输入的物料 继续
						}

						if ((matFlag == 1 || matFlag == 2) && booCheck && collectFlg == 0) {
							//批次管控
							let tmpBatch = this.detailListView[i2].batchno.toString();
							//console.log('tmpBatch1:' + tmpBatch);
							if (tmpBatch != batchNo) {
								continue; //如果物料批次跟当前输入不一致 继续
							}
						}
						if (matFlag == 0 && booCheck && collectFlg == 0) {
							//序列管控
							let tmpBatch = this.detailListView[i2].batchno.toString();
							let tmpSN = this.detailListView[i2].sn.toString();
							if (!(tmpBatch == batchNo && tmpSN == sn)) {
								continue; //如果物料批次跟当前输入不一致 继续
							}
						}

						//符合采集的任务下的所有已经采集数量，有可能含有不匹配批次序列的采集记录
						for (let i25 = 0; i25 < this.stocks.length; i25++) {
							let arrivalsDetailid = this.stocks[i25].arrivalsDetailid.toString();
							let InCollectFlg = this.stocks[i25].collectFlg.toString();
							if (arrivalsDetailid == this.detailListView[i2].arrivalsDetailid.toString() && InCollectFlg == 1) {
								tmpNotmatQty = parseFloat(this.stocks[i25].collectQty);
								tatalNotmatQty += tmpNotmatQty;
							}
						}

						taskQty = parseFloat(this.detailListView[i2].qty);
						tmpQty = parseFloat(this.detailListView[i2].goodqty);
						tatalTaskQty += taskQty;
						tatalTmpQty += tmpQty;
					}

					//校验数量是否足够
					if (tatalTmpQty + qty > tatalTaskQty) {
						qiangzhicajiFlag = 1;
						let mattatalTaskQty = 0; //当前物料总计划数
						let mattatalTmpQty = 0; //当前物料总扫描数
						for (let i3 = 0; i3 < this.detailListView.length; i3++) {
							let tmpMat33 = this.detailListView[i3].matcode.toString(); //物料
							if (tmpMat33 != matCode) {
								continue; //如果物料不是当前输入的物料 继续
							}
							taskQty = parseFloat(this.detailListView[i3].qty);
							tmpQty = parseFloat(this.detailListView[i3].goodqty);
							mattatalTaskQty += taskQty;
							mattatalTmpQty += tmpQty;
						}
						//排除掉当前的任务明细不相符采集记录后再次比较
						if (mattatalTmpQty + qty > mattatalTaskQty) {
							this.$set(this.scanningContent, 'text', '');
							throw new Error('本次采集数量【' + qty + '】大于剩余可采集数量【' + (mattatalTaskQty - mattatalTmpQty) + '】');
						}

						if (tatalTmpQty - tatalNotmatQty + qty > tatalTaskQty) {
							if (mattatalTmpQty + qty > mattatalTaskQty) {
								this.$set(this.scanningContent, 'text', '');
								throw new Error('本次采集数量【' + qty + '】大于剩余可采集数量【' + (mattatalTaskQty - mattatalTmpQty) + '】');
							}

							let res = await this.showConfirm(
								'采集的物料【' +
									matCode +
									'】批号【' +
									batchNo +
									'】在采集任务仅能匹配上【' +
									(tatalTaskQty - tatalTmpQty + tatalNotmatQty) +
									'】颗，剩余的【' +
									(qty - (tatalTaskQty - (tatalTmpQty - tatalNotmatQty))) +
									'】颗物料批次与其他采集任务不匹配，如果采集则将剩余采集数据分摊至该物料的其他采集任务，是否采集?'
							);
							if (!res) {
								return;
							}
						}
					}

					// qiangzhicajiFlag=0 正常采集 批次序列付采集任务匹配 且不需要拆解已经采集数据
					// qiangzhicajiFlag=1 正常采集 批次序列付采集任务匹配 需要踢掉已经采集数据里面的采集不批次记录，并将其转到其他任务
					// qiangzhicajiFlag=2 正常采集 批次序列付采集任务匹配 需要踢掉已经采集数据里面的采集不批次记录，并将其转到其他任务；并且当前匹配任务不满足还需要分摊至其他任务
					if (qiangzhicajiFlag == 0 && collectFlg == 0) {
						let decQty = qty;
						var ls = new Map();
						var dicMtlOperatin = new Map();

						for (let i1 = 0; i1 < this.detailListView.length; i1++) {
							if (decQty <= 0) {
								break;
							}

							let tmpMat1 = this.detailListView[i1].matcode.toString(); //物料

							if (tmpMat1 != matCode) {
								continue; //如果物料、货位不是当前输入的物料、货位 继续
							}
							taskQty = parseFloat(this.detailListView[i1].qty);
							tmpQty = parseFloat(this.detailListView[i1].goodqty);

							inTaskItemid = this.detailListView[i1].arrivalsDetailid.toString();

							if (taskQty == tmpQty) {
								continue;
							}

							if (matFlag == '1' || matFlag == '2') {
								//booCheck true表示完工入库 不校验批次
								if (booCheck) {
									let tmpBatch = this.detailListView[i1].batchno.toString();
									if (tmpBatch != batchNo && collectFlg == 0) {
										continue;
									}
								}
							}

							if (matFlag == '0') {
								//booCheck true表示完工入库 不校验批次
								if (booCheck) {
									let tmpBatch = this.detailListView[i1].batchno.toString();
									let tmpSn = this.detailListView[i1].sn.toString();
									if (!(tmpBatch == batchNo && tmpSn == sn && collectFlg == 0)) {
										continue;
									}
								}
							}

							if (!this.dicMtlQty.has(inTaskItemid)) {
								let ls = [];
								ls[0] = tmpQty;
								ls[1] = '0';
								ls[2] = tmpMat1;
								this.dicMtlQty.set(inTaskItemid, ls);
							}

							if (taskQty - tmpQty >= decQty) {
								//表示足够扣
								/* this.detailListView[i1].goodqty = tmpQty + decQty; */

								var cc1 = this.detailListView[i1];
								cc1.goodqty = tmpQty + decQty;
								this.$set(this.detailListView, i1, cc1);

								let ls2 = this.dicMtlQty.get(inTaskItemid);
								ls2[1] = tmpQty + decQty;
								this.dicMtlQty.set(inTaskItemid, ls2);

								let set = [];
								set[0] = taskQty;
								set[1] = decQty;
								dicMtlOperatin.set(inTaskItemid, set); //第一笔存物料计划数

								decQty = 0;
								exsitFlag = true;
							} else {
								decQty = decQty - (taskQty - tmpQty); //本次扫描数量- 计划剩余数量
								/* this.detailListView[i1].goodqty = taskQty; */

								var cc2 = this.detailListView[i1];
								cc2.goodqty = taskQty;
								this.$set(this.detailListView, i1, cc2);

								let ls2 = this.dicMtlQty.get(inTaskItemid);
								ls2[1] = taskQty;
								this.dicMtlQty.set(inTaskItemid, ls2);

								let set = [];
								set[0] = taskQty;
								set[1] = taskQty - tmpQty;
								dicMtlOperatin.set(inTaskItemid, set); //第一笔存物料计划数
							}
						}
						if (!exsitFlag) {
							this.$set(this.scanningContent, 'text', '');
							throw new Error('采集物料批号序列号信息匹配任务明细失败');
						}

						if (sn != null && sn != '' && sn != undefined && !this.dicSeq.has(matCode + '@' + sn)) {
							this.dicSeq.set(matCode + '@' + sn, matCode + '@' + sn);
						}
						//添加采集记录;对于采集记录的修改操作统一在采集明细中操作
						this.taskcollAdd(matCode);
						this.AddCollectData(matCode, batchNo, sn, taskQty, qty, null, null, null, dicMtlOperatin, collectFlg, pdate, vdays);
					}

					// qiangzhicajiFlag=1 正常采集 批次序列付采集任务匹配 需要踢掉已经采集数据里面的采集不批次记录，并将其转到其他任务
					if (qiangzhicajiFlag == 1 || collectFlg == 1) {
						let decQty1 = qty;
						var ls = new Map();
						var dicMtlOperatin = new Map();

						let stocks_cl = [];
						for (let i3 = 0; i3 < this.detailListView.length; i3++) {
							//首先修改任务-不匹配数据从已采集列表删除
							//将采集任务的已采集数据减去不匹配数据数量
							//处理当前采集数量
							//处理删除的不匹配数量

							if (decQty1 <= 0) {
								break;
							}
							let tmpMat = this.detailListView[i3].matcode.toString(); //物料
							if (tmpMat != matCode) {
								continue; //如果物料、货位不是当前输入的物料、货位 继续
							}
							taskQty = parseFloat(this.detailListView[i3].qty);
							tmpQty = parseFloat(this.detailListView[i3].goodqty);
							inTaskItemid = this.detailListView[i3].arrivalsDetailid;

							if (matFlag == '1' || matFlag == '2') {
								//booCheck true表示完工入库 不校验批次
								if (booCheck) {
									let tmpBatch2 = this.detailListView[i3].batchno;
									if (tmpBatch2 != batchNo && collectFlg == 0) {
										continue;
									}
								}
							}

							if (matFlag == '0') {
								//booCheck true表示完工入库 不校验批次
								if (booCheck) {
									let tmpBatch1 = this.detailListView[i3].batchno;
									let tmpSn1 = this.detailListView[i3].sn;
									if (!(tmpBatch1 == batchNo && tmpSn1 == sn && collectFlg == 0)) {
										continue;
									}
								}
							}

							//检查是否有非匹配采集记录
							let shengyuQty = 0;

							for (let j = this.stocks.length - 1; j >= 0; j--) {
								let stock9 = this.stocks[j];
								let InTaskItemid = stock9.arrivalsDetailid;
								let InCollectFlg = stock9.collectFlg;

								if (InTaskItemid == this.detailListView[i3].arrivalsDetailid && InCollectFlg == 1) {
									stocks_cl.push(stock9);
									shengyuQty += stock9.collectQty;
									this.stocks.splice(j, 1);
								}
							}

							tmpQty = tmpQty - shengyuQty;
							if (taskQty == tmpQty) {
								continue;
							}

							if (!this.dicMtlQty.has(inTaskItemid)) {
								let ls7 = [];
								ls7[0] = tmpQty;
								ls7[1] = '0';
								ls7[2] = tmpMat;
								this.dicMtlQty.set(inTaskItemid, ls7);
							}

							if (taskQty - tmpQty >= decQty1) {
								//表示足够扣
								/* this.detailListView[i3].goodqty = tmpQty + decQty1; */

								var cc3 = this.detailListView[i3];
								cc3.goodqty = tmpQty + decQty1;
								this.$set(this.detailListView, i3, cc3);

								let ls26 = this.dicMtlQty.get(inTaskItemid);
								ls26[1] = tmpQty + decQty1;
								this.dicMtlQty.set(inTaskItemid, ls26);

								let set6 = [];
								set6[0] = taskQty;
								set6[1] = decQty1;
								dicMtlOperatin.set(inTaskItemid, set6); //第一笔存物料计划数

								decQty1 = 0;
								exsitFlag = true;
							} else {
								decQty1 = decQty1 - (taskQty - tmpQty); //本次扫描数量- 计划剩余数量
								/* this.detailListView[i3].goodqty = taskQty; */

								var cc4 = this.detailListView[i3];
								cc4.goodqty = taskQty;
								this.$set(this.detailListView, i3, cc4);

								let ls25 = this.dicMtlQty.get(inTaskItemid);
								ls25[1] = taskQty;
								this.dicMtlQty.set(inTaskItemid, ls25);

								let set5 = [];
								set5[0] = taskQty;
								set5[1] = taskQty - tmpQty;
								dicMtlOperatin.set(inTaskItemid, set5); //第一笔存物料计划数
							}
						}

						if (!exsitFlag && decQty1 != qty) {
							this.$set(this.scanningContent, 'text', '');
							throw new Error('采集物料批号序列号信息匹配任务明细失败');
						}

						if (sn != null && sn != '' && sn != undefined && !this.dicSeq.has(matCode + '@' + sn)) {
							this.dicSeq.set(matCode + '@' + sn, matCode + '@' + sn);
						}

						//添加采集记录;对于采集记录的修改操作统一在采集明细中操作
						if (decQty1 < qty) {
							this.taskcollAdd(matCode);
							this.AddCollectData(matCode, batchNo, sn, taskQty, qty, null, null, null, dicMtlOperatin, collectFlg, pdate, vdays);
						}
						if (decQty1 > 0) {
							let stock25 = [];
							stock25.matcode = matCode;
							stock25.batchNo = batchNo;
							stock25.sn = sn;
							stock25.collectQty = decQty1;
							stocks_cl.push(stock25);
						}

						for (let x1 = 0; x1 < stocks_cl.length; x1++) {
							let stockx = stocks_cl[x1];

							dicMtlOperatin = new Map();
							decQty1 = stockx.collectQty;

							collectFlg = '1';
							for (let i = 0; i < this.detailListView.length; i++) {
								if (decQty1 <= 0) {
									break;
								}
								let tmpMat = this.detailListView[i].matcode; //物料

								if (tmpMat != matCode) {
									continue; //如果物料、货位不是当前输入的物料、货位 继续
								}
								taskQty = parseFloat(this.detailListView[i].qty);
								tmpQty = parseFloat(this.detailListView[i].goodqty);
								inTaskItemid = this.detailListView[i].arrivalsDetailid;

								if (taskQty == tmpQty) {
									continue;
								}

								if (!this.dicMtlQty.has(inTaskItemid)) {
									let ls21 = [];
									ls21[0] = tmpQty;
									ls21[1] = '0';
									ls21[2] = tmpMat;
									this.dicMtlQty.set(inTaskItemid, ls21);
								}

								if (taskQty - tmpQty >= decQty1) {
									//表示足够扣
									/* this.detailListView[i].goodqty = tmpQty + decQty1; */

									var cc5 = this.detailListView[i];
									cc5.goodqty = tmpQty + decQty1;
									this.$set(this.detailListView, i, cc5);

									let ls2 = this.dicMtlQty.get(inTaskItemid);
									ls2[1] = taskQty;
									this.dicMtlQty.set(inTaskItemid, ls2);

									let set2 = [];
									set2[0] = taskQty;
									set2[1] = tmpQty + decQty1;
									dicMtlOperatin.set(inTaskItemid, set2); //第一笔存物料计划数

									decQty1 = 0;
									exsitFlag = true;
								} else {
									decQty1 = decQty1 - (taskQty - tmpQty); //本次扫描数量- 计划剩余数量
									/* this.detailListView[i].goodqty = taskQty; */

									var cc6 = this.detailListView[i];
									cc6.goodqty = taskQty;
									this.$set(this.detailListView, i, cc6);

									let ls3 = this.dicMtlQty.get(inTaskItemid);
									ls3[1] = taskQty;
									this.dicMtlQty.set(inTaskItemid, ls3);

									let set3 = [];
									set3[0] = taskQty;
									set3[1] = taskQty - tmpQty;
									dicMtlOperatin.set(inTaskItemid, set3); //第一笔存物料计划数
								}
							}

							if (!exsitFlag && decQty1 != qty) {
								this.$set(this.scanningContent, 'text', '');
								throw new Error('采集物料批号序列号信息匹配任务明细失败');
							}

							if (stockx.sn != '' && stockx.sn != null && stockx.sn != undefined && !this.dicSeq.has(matCode + '@' + sn)) {
								this.dicSeq.set(matCode + '@' + stockx.sn, matCode + '@' + stockx.sn);
							}
							//添加采集记录;对于采集记录的修改操作统一在采集明细中操作
							this.taskcollAdd(matCode);
							this.AddCollectData(matCode, stockx.batchNo, stockx.sn, taskQty, stockx.collectQty, null, null, null, dicMtlOperatin, collectFlg, pdate, vdays);
						}
					}

					await this.localSave();
					this.InitializeCollect();
				}
				this.$set(this.scanningContent, 'text', '');
				this.placeholder = this.getPlaceMsg();
			} catch (error) {
				uni.showModal({
					title: '到货签收异常',
					showCancel: false,
					content: error.message
				});
				this.$set(this.scanningContent, 'text', '');
				this.InitializeCollect();
				console.error(`【错误发生在】${new Error().stack}\n`, error);
			}
		},
		async getPmMaterialInfoByQR(barcode) {
			return new Promise(function (resolve, reject) {
				getPmMaterialInfoByQR(barcode).then((response) => {
					resolve(response);
				});
			});
		},
		/// 设定提示信息
		/// </summary>
		/// <param name="msg"></param>
		getPlaceMsg() {
			if (this.arrivalsDetailColl.matcode == '' || this.arrivalsDetailColl.matcode == null || this.arrivalsDetailColl.matcode == undefined) {
				//条码为空 采集条码
				this.focus = false;
				return '请扫描二维码';
			} else if (
				(this.arrivalsDetailColl.sn == '' || this.arrivalsDetailColl.sn == null || this.arrivalsDetailColl.sn == undefined) &&
				(this.arrivalsDetailColl.qty == '' || this.arrivalsDetailColl.qty == null || this.arrivalsDetailColl.qty == undefined || this.arrivalsDetailColl.qty == 0)
			) {
				//肯定是批次  如数量为空
				this.focus = true;
				return '请输入数量';
			} else {
				this.focus = false;
				return '';
			}
		},
		/// <summary>
		/// 重新初始采集
		/// </summary>
		InitializeCollect() {
			matCode = null;
			batchNo = null;
			sn = null;
			pdate = null;
			vdays = null;
			collectQty = 0;
			this.arrivalsDetailColl = [];
			collectFlg = '';
			matFoundFlg = '';
			booCheck = true; //是否校验批次
			storeRoom = ''; //子库
			batchFountFlg = '0';
			matControlFlag = '';
			this.focus = false;
		},
		localSave() {
			uni.setStorage({
				key: 'SignDetailList',
				data: this.detailListView,
				success: function () {
					//console.log('采集成功后 任务列表保存成功');
				}
			});
			uni.setStorage({
				key: 'stocks',
				data: this.stocks,
				success: function () {
					//console.log('采集成功后 采集列表保存成功');
				}
			});
		},
		//检查物料是否在任务中存在, 为0序列管理的只校验物料码, 其他的看 booCheck flag的设置,比较批次
		CheckMat(barcode, matControl, sn, arriveSignDetailList2) {
			for (let i = 0; i < arriveSignDetailList2.length; i++) {
				let tmpMat = this.detailListView[i].matcode;
				if (matControl == '0') {
					if (booCheck) {
						let tmpSn = this.this.detailListView[i].sn; //序列
						let tmpBatch = this.detailListView[i].batchno;
						if (tmpMat == barcode && tmpSn == sn) {
							storeRoom = this.detailListView[i].subinventoryCode;
							break;
						}
					} else {
						let tmpSn = this.detailListView[i].sn; //序列
						let tmpBatch = this.detailListView[i].batchno;
						if (tmpMat == barcode) {
							storeRoom = this.detailListView[i].subinventoryCode;
							break;
						}
					}
				} else if (matControl == '1' || matControl == '2') {
					if (booCheck) {
						let tmpBatch = this.detailListView[i].batchno;
						if (tmpMat == barcode && tmpBatch == sn) {
							storeRoom = this.detailListView[i].subinventoryCode;
							break;
						}
					} else {
						if (tmpMat == barcode) {
							storeRoom = this.detailListView[i].subinventoryCode;
							break;
						}
					}
				}
			}
			if ((matControl = '0')) {
				//0单件(序列)控制，1批次控制，2无控制
				uni.showModal({
					title: '采集异常',
					showCancel: false,
					content: '任务明细中物料【' + barcode + '】不存在'
				});
				this.$set(this.scanningContent, 'text', '');
				return;
			} else {
				uni.showModal({
					title: '采集异常',
					showCancel: false,
					content: '任务明细中物料【' + barcode + '】不存在'
				});
				this.$set(this.scanningContent, 'text', '');
				return;
			}
		},

		//检查物料是否在任务中存在, 为0序列管理的只校验物料码, 其他的看 booCheck flag的设置,比较批次
		async CheckMat2(barcode, matControl, BatchNo, sn) {
			matFoundFlg = '0';
			batchFountFlg = '0';
			collectFlg = '0';
			let result = null;

			for (let i = 0; i < this.detailListView.length; i++) {
				let tmpMat = this.detailListView[i].matcode;
				if (matControl == '0') {
					if (booCheck) {
						if (tmpMat == barcode) {
							storeRoom = this.detailListView[i].subinventoryCode.toString();
							matFoundFlg = '1';
							break;
						}
					} else {
						if (tmpMat == barcode) {
							storeRoom = this.detailListView[i].subinventoryCode.toString();
							matFoundFlg = '1';
							break;
						}
					}
				} else if (matControl == '1' || matControl == '2') {
					if (booCheck) {
						if (tmpMat == barcode) {
							storeRoom = this.detailListView[i].subinventoryCode.toString();
							matFoundFlg = '1';
							break;
						}
					} else {
						if (tmpMat == barcode) {
							storeRoom = this.detailListView[i].subinventoryCode.toString();
							matFoundFlg = '1';
							break;
						}
					}
				}
			}
			if (matFoundFlg == '1') {
				for (let i = 0; i < this.detailListView.length; i++) {
					let tmpMat3 = this.detailListView[i].matcode;
					if (matControl == '0') {
						if (booCheck) {
							let tmpSn3 = this.detailListView[i].sn.toString(); //序列
							let tmpBatch3 = this.detailListView[i].batchno.toString();
							if (tmpMat3 == barcode && tmpSn3 == sn && tmpBatch3 == BatchNo) {
								storeRoom = this.detailListView[i].subinventoryCode.toString();
								batchFountFlg = '1';
								break;
							}
						} else {
							if (tmpMat3 == barcode) {
								storeRoom = this.detailListView[i].subinventoryCode.toString();
								batchFountFlg = '1';
								break;
							}
						}
					} else if (matControl == '1' || matControl == '2') {
						if (booCheck) {
							let tmpBatch4 = this.detailListView[i].batchno.toString();
							if (tmpMat3 == barcode && tmpBatch4 == BatchNo) {
								storeRoom = this.detailListView[i].subinventoryCode.toString();
								batchFountFlg = '1';
								break;
							}
						} else {
							if (tmpMat3 == barcode) {
								storeRoom = this.detailListView[i].subinventoryCode.toString();
								batchFountFlg = '1';
								break;
							}
						}
					}
				}
			}
			if (matFoundFlg == '0') {
				/* this.$u.toast('任务明细中物料【' + barcode + '】不存在"'); */
				result = await this.showAlert1('任务明细中物料【' + barcode + '】不存在"');
				if (result) {
					this.$set(this.scanningContent, 'text', '');
					return;
				}
			}

			if (matFoundFlg == '1' && batchFountFlg == '0') {
				if (matControl == '0') {
					//0单件(序列)控制，1批次控制，2无控制
					result = await this.showConfirm('任务明细中物料【' + barcode + '】物料存在，但采集的批号【' + BatchNo + '】序列【' + Sn + '】与任务不匹配，是否采集?');
					//console.log(result);
					if (result) {
						//console.log('主页面状态修改成功confirm1');
						collectFlg = '1'; //批次序列不匹配下 采集
					} else {
						//console.log('主页面状态修改成功confirm2');
						this.$set(this.scanningContent, 'text', '');
						storeRoom = '';
						return;
					}
				} else {
					result = await this.showConfirm('任务明细中物料【' + barcode + '】物料存在，但采集的批号【' + BatchNo + '】与任务不匹配，是否采集?');
					//console.log(result);
					if (result) {
						//console.log('主页面状态修改成功confirm1');
						collectFlg = '1'; //批次序列不匹配下 采集
						if (matFoundFlg == '1' && batchFountFlg == '1') {
							collectFlg = '0'; //批次序列匹配下正常采集
						}
					} else {
						//console.log('主页面状态修改成功confirm2');
						this.$set(this.scanningContent, 'text', '');
						storeRoom = '';
						return;
					}
				}
			}
		},

		async showConfirm(content) {
			return new Promise(function (resolve, reject) {
				// 一段耗时的异步操作
				uni.showModal({
					title: '操作确认',
					content: content,
					cancelText: '取消',
					confirmText: '确认',
					success: (res) => {
						if (res.confirm) {
							resolve(true); // 数据处理完成
						} else if (res.cancel) {
							//console.log('用户点击取消');
							resolve(false);
						}
					}
				});
			});
		},
		async showAlert1(content) {
			return new Promise(function (resolve, reject) {
				// 一段耗时的异步操作
				uni.showModal({
					title: '操作确认',
					content: content,
					showCancel: false,
					cancelText: '取消',
					confirmText: '确认',
					success: (res) => {
						if (res.confirm) {
							resolve(true); // 数据处理完成
						} else if (res.cancel) {
							//console.log('用户点击取消');
							resolve(false);
						}
					}
				});
			});
		},

		async DealQuantity(qty, matFlag) {
			//console.log('qty:' + qty);
			//console.log('matFlag:' + matFlag);
			//console.log('detailListView.length:' + this.detailListView.length);
			var matCode = this.arrivalsDetailColl.matcode.toString();
			var batchNo = this.arrivalsDetailColl.batchno.toString();
			var sn = null;

			matFlag = Number(matFlag);
			if (matFlag == undefined || matFlag == null || matFlag.length == 0) {
				uni.showModal({
					title: '采集异常',
					showCancel: false,
					content: '获取物料编码属性失败'
				});
				this.$set(this.scanningContent, 'text', '');
				return;
			}
			if (matFlag == 0) {
				sn = this.arrivalsDetailColl.sn.toString();
			}
			if (qty <= 0) {
				uni.showModal({
					title: '采集异常',
					showCancel: false,
					content: '采集数量必须大于0'
				});
				this.$set(this.scanningContent, 'text', '');
				return;
			}

			var exsitFlag = false;
			var taskQty = 0;
			var tmpQty = 0;
			var tmpNotmatQty = 0;
			var qiangzhicajiFlag = 0;

			var tatalTaskQty = 0; //当前物料总计划数
			var tatalTmpQty = 0; //当前物料总扫描数
			var tatalNotmatQty = 0; //当前物料总扫描数
			var inTaskItemid = '';

			/* var booCheck = true; */

			//统计当前物料总扫描数和总计划数
			for (let i2 = 0; i2 < this.detailListView.length; i2++) {
				//console.log('detailListView[' + i2 + '].matcode:' + this.detailListView[i2].matcode);
				let tmpMat = this.detailListView[i2].matcode.toString(); //物料
				if (tmpMat != matCode) {
					continue; //如果物料不是当前输入的物料 继续
				}

				if ((matFlag == 1 || matFlag == 2) && booCheck && collectFlg == 0) {
					//批次管控
					let tmpBatch = this.detailListView[i2].batchno.toString();
					//console.log('tmpBatch1:' + tmpBatch);
					if (tmpBatch != batchNo) {
						continue; //如果物料批次跟当前输入不一致 继续
					}
				}
				if (matFlag == 0 && booCheck && collectFlg == 0) {
					//序列管控
					let tmpBatch = this.detailListView[i2].batchno.toString();
					let tmpSN = this.detailListView[i2].sn.toString();
					//console.log('tmpBatch2:' + tmpBatch);
					//console.log('tmpSN2:' + tmpSN);
					if (!(tmpBatch == batchNo && tmpSN == sn)) {
						continue; //如果物料批次跟当前输入不一致 继续
					}
				}

				//符合采集的任务下的所有已经采集数量，有可能含有不匹配批次序列的采集记录
				for (let i25 = 0; i25 < this.stocks.length; i25++) {
					let arrivalsDetailid = this.stocks[i25].arrivalsDetailid.toString();
					let InCollectFlg = this.stocks[i25].collectFlg.toString();
					if (arrivalsDetailid == this.detailListView[i2].arrivalsDetailid.toString() && InCollectFlg == 1) {
						tmpNotmatQty = parseFloat(this.stocks[i25].collectQty);
						tatalNotmatQty += tmpNotmatQty;
					}
				}

				taskQty = parseFloat(this.detailListView[i2].qty);
				tmpQty = parseFloat(this.detailListView[i2].goodqty);
				tatalTaskQty += taskQty;
				tatalTmpQty += tmpQty;
			}

			//校验数量是否足够
			if (tatalTmpQty + qty > tatalTaskQty) {
				qiangzhicajiFlag = 1;
				let mattatalTaskQty = 0; //当前物料总计划数
				let mattatalTmpQty = 0; //当前物料总扫描数
				for (let i3 = 0; i3 < this.detailListView.length; i3++) {
					let tmpMat33 = this.detailListView[i3].matcode.toString(); //物料
					if (tmpMat33 != matCode) {
						continue; //如果物料不是当前输入的物料 继续
					}
					taskQty = parseFloat(this.detailListView[i3].qty);
					tmpQty = parseFloat(this.detailListView[i3].goodqty);
					mattatalTaskQty += taskQty;
					mattatalTmpQty += tmpQty;
				}
				//排除掉当前的任务明细不相符采集记录后再次比较
				if (mattatalTmpQty + qty > mattatalTaskQty) {
					uni.showModal({
						title: '采集异常',
						showCancel: false,
						content: '本次采集数量【' + qty + '】大于剩余可采集数量【' + (mattatalTaskQty - mattatalTmpQty) + '】'
					});
					this.$set(this.scanningContent, 'text', '');
					return;
				}

				if (tatalTmpQty - tatalNotmatQty + qty > tatalTaskQty) {
					if (mattatalTmpQty + qty > mattatalTaskQty) {
						uni.showModal({
							title: '采集异常',
							showCancel: false,
							content: '本次采集数量【' + qty + '】大于剩余可采集数量【' + (mattatalTaskQty - mattatalTmpQty) + '】'
						});
						this.$set(this.scanningContent, 'text', '');
						return;
					}

					let res = await this.showConfirm(
						'采集的物料【' +
							matCode +
							'】批号【' +
							batchNo +
							'】在采集任务仅能匹配上【' +
							(tatalTaskQty - tatalTmpQty + tatalNotmatQty) +
							'】颗，剩余的【' +
							(qty - (tatalTaskQty - (tatalTmpQty - tatalNotmatQty))) +
							'】颗物料批次与其他采集任务不匹配，如果采集则将剩余采集数据分摊至该物料的其他采集任务，是否采集?'
					);
					if (!res) {
						return;
					}
				}
			}

			// qiangzhicajiFlag=0 正常采集 批次序列付采集任务匹配 且不需要拆解已经采集数据
			// qiangzhicajiFlag=1 正常采集 批次序列付采集任务匹配 需要踢掉已经采集数据里面的采集不批次记录，并将其转到其他任务
			// qiangzhicajiFlag=2 正常采集 批次序列付采集任务匹配 需要踢掉已经采集数据里面的采集不批次记录，并将其转到其他任务；并且当前匹配任务不满足还需要分摊至其他任务
			if (qiangzhicajiFlag == 0 && collectFlg == 0) {
				let decQty = qty;
				var ls = new Map();
				var dicMtlOperatin = new Map();

				for (let i1 = 0; i1 < this.detailListView.length; i1++) {
					if (decQty <= 0) {
						break;
					}

					let tmpMat1 = this.detailListView[i1].matcode.toString(); //物料

					if (tmpMat1 != matCode) {
						continue; //如果物料、货位不是当前输入的物料、货位 继续
					}
					taskQty = parseFloat(this.detailListView[i1].qty);
					tmpQty = parseFloat(this.detailListView[i1].goodqty);

					inTaskItemid = this.detailListView[i1].arrivalsDetailid.toString();

					if (taskQty == tmpQty) {
						continue;
					}

					if (matFlag == '1' || matFlag == '2') {
						//booCheck true表示完工入库 不校验批次
						if (booCheck) {
							let tmpBatch = this.detailListView[i1].batchno.toString();
							if (tmpBatch != batchNo && collectFlg == 0) {
								continue;
							}
						}
					}

					if (matFlag == '0') {
						//booCheck true表示完工入库 不校验批次
						if (booCheck) {
							let tmpBatch = this.detailListView[i1].batchno.toString();
							let tmpSn = this.detailListView[i1].sn.toString();
							if (!(tmpBatch == batchNo && tmpSn == sn && collectFlg == 0)) {
								continue;
							}
						}
					}

					if (!this.dicMtlQty.has(inTaskItemid)) {
						let ls = [];
						ls[0] = tmpQty;
						ls[1] = '0';
						ls[2] = tmpMat1;
						this.dicMtlQty.set(inTaskItemid, ls);
					}

					if (taskQty - tmpQty >= decQty) {
						//表示足够扣
						/* this.detailListView[i1].goodqty = tmpQty + decQty; */
						var cc6 = this.detailListView[i1];
						cc6.goodqty = tmpQty + decQty;
						this.$set(this.detailListView, i1, cc6);

						let ls2 = this.dicMtlQty.get(inTaskItemid);
						ls2[1] = tmpQty + decQty;
						this.dicMtlQty.set(inTaskItemid, ls2);

						let set = [];
						set[0] = taskQty;
						set[1] = decQty;
						dicMtlOperatin.set(inTaskItemid, set); //第一笔存物料计划数

						decQty = 0;
						exsitFlag = true;
					} else {
						decQty = decQty - (taskQty - tmpQty); //本次扫描数量- 计划剩余数量
						/* this.detailListView[i1].goodqty = taskQty; */

						var cc5 = this.detailListView[i1];
						cc5.goodqty = taskQty;
						this.$set(this.detailListView, i1, cc5);

						let ls2 = this.dicMtlQty.get(inTaskItemid);
						ls2[1] = taskQty;
						this.dicMtlQty.set(inTaskItemid, ls2);

						let set = [];
						set[0] = taskQty;
						set[1] = taskQty - tmpQty;
						dicMtlOperatin.set(inTaskItemid, set); //第一笔存物料计划数
					}
				}
				if (!exsitFlag) {
					uni.showModal({
						title: '采集异常',
						showCancel: false,
						content: '采集物料批号序列号信息匹配任务明细失败'
					});
					this.$set(this.scanningContent, 'text', '');
					return;
				}

				if (sn != null && sn != '' && sn != undefined && !this.dicSeq.has(matCode + '@' + sn)) {
					this.dicSeq.set(matCode + '@' + sn, matCode + '@' + sn);
				}
				//添加采集记录;对于采集记录的修改操作统一在采集明细中操作
				this.taskcollAdd(matCode);
				this.AddCollectData(matCode, batchNo, sn, taskQty, qty, null, null, null, dicMtlOperatin, collectFlg, pdate, vdays);
			}

			// qiangzhicajiFlag=1 正常采集 批次序列付采集任务匹配 需要踢掉已经采集数据里面的采集不批次记录，并将其转到其他任务
			if (qiangzhicajiFlag == 1 || collectFlg == 1) {
				let decQty1 = qty;
				var ls = new Map();
				var dicMtlOperatin = new Map();

				let stocks_cl = [];
				for (let i3 = 0; i3 < this.detailListView.length; i3++) {
					//首先修改任务-不匹配数据从已采集列表删除
					//将采集任务的已采集数据减去不匹配数据数量
					//处理当前采集数量
					//处理删除的不匹配数量

					if (decQty1 <= 0) {
						break;
					}
					let tmpMat = this.detailListView[i3].matcode.toString(); //物料
					//console.log('tmpMat:' + tmpMat);
					//console.log('matCode:' + matCode);
					if (tmpMat != matCode) {
						continue; //如果物料、货位不是当前输入的物料、货位 继续
					}
					taskQty = parseFloat(this.detailListView[i3].qty);
					tmpQty = parseFloat(this.detailListView[i3].goodqty);
					inTaskItemid = this.detailListView[i3].arrivalsDetailid;

					if (matFlag == '1' || matFlag == '2') {
						//booCheck true表示完工入库 不校验批次
						if (booCheck) {
							let tmpBatch2 = this.detailListView[i3].batchno;
							if (tmpBatch2 != batchNo && collectFlg == 0) {
								continue;
							}
						}
					}

					if (matFlag == '0') {
						//booCheck true表示完工入库 不校验批次
						if (booCheck) {
							let tmpBatch1 = this.detailListView[i3].batchno;
							let tmpSn1 = this.detailListView[i3].sn;
							if (!(tmpBatch1 == batchNo && tmpSn1 == sn && collectFlg == 0)) {
								continue;
							}
						}
					}

					//检查是否有非匹配采集记录
					let shengyuQty = 0;

					for (let j = this.stocks.length - 1; j >= 0; j--) {
						let stock9 = this.stocks[j];
						let InTaskItemid = stock9.arrivalsDetailid;
						let InCollectFlg = stock9.collectFlg;

						if (InTaskItemid == this.detailListView[i3].arrivalsDetailid && InCollectFlg == 1) {
							stocks_cl.push(stock9);
							shengyuQty += stock.collectQty;
							this.stocks.splice(j, 1);
						}
					}

					tmpQty = tmpQty - shengyuQty;
					if (taskQty == tmpQty) {
						continue;
					}

					if (!this.dicMtlQty.has(inTaskItemid)) {
						let ls7 = [];
						ls7[0] = tmpQty;
						ls7[1] = '0';
						ls7[2] = tmpMat;
						this.dicMtlQty.set(inTaskItemid, ls7);
					}

					if (taskQty - tmpQty >= decQty1) {
						//表示足够扣
						/* this.detailListView[i3].goodqty = tmpQty + decQty1; */

						var cc4 = this.detailListView[i3];
						cc4.goodqty = mpQty + decQty1;
						this.$set(this.detailListView, i3, cc4);

						let ls26 = this.dicMtlQty.get(inTaskItemid);
						ls26[1] = tmpQty + decQty1;
						this.dicMtlQty.set(inTaskItemid, ls26);

						let set6 = [];
						set6[0] = taskQty;
						set6[1] = decQty1;
						dicMtlOperatin.set(inTaskItemid, set6); //第一笔存物料计划数

						decQty1 = 0;
						exsitFlag = true;
					} else {
						decQty1 = decQty1 - (taskQty - tmpQty); //本次扫描数量- 计划剩余数量
						/* this.detailListView[i3].goodqty = taskQty; */

						var cc3 = this.detailListView[i3];
						cc3.goodqty = taskQty;
						this.$set(this.detailListView, i3, cc3);

						let ls25 = this.dicMtlQty.get(inTaskItemid);
						ls25[1] = taskQty;
						this.dicMtlQty.set(inTaskItemid, ls25);

						let set5 = [];
						set5[0] = taskQty;
						set5[1] = taskQty - tmpQty;
						dicMtlOperatin.set(inTaskItemid, set5); //第一笔存物料计划数
					}
				}

				if (!exsitFlag && decQty1 != qty) {
					uni.showModal({
						title: '采集物料批号序列号信息匹配任务明细失败',
						showCancel: false,
						content: ''
					});
					this.$set(this.scanningContent, 'text', '');
					return;
				}

				if (sn != null && sn != '' && sn != undefined && !this.dicSeq.has(matCode + '@' + sn)) {
					this.dicSeq.set(matCode + '@' + sn, matCode + '@' + sn);
				}

				//添加采集记录;对于采集记录的修改操作统一在采集明细中操作
				if (decQty1 < qty) {
					this.taskcollAdd(matCode);
					this.AddCollectData(matCode, batchNo, sn, taskQty, qty, null, null, null, dicMtlOperatin, collectFlg, pdate, vdays);
				}
				if (decQty1 > 0) {
					let stock25 = [];
					stock25.matcode = matCode;
					stock25.batchNo = batchNo;
					stock25.sn = sn;
					stock25.collectQty = decQty1;
					stocks_cl.push(stock25);
				}

				for (let x1 = 0; x1 < stocks_cl.length; x1++) {
					let stockx = stocks_cl[x1];

					dicMtlOperatin = new Map();
					decQty1 = stockx.collectQty;

					collectFlg = '1';
					for (let i = 0; i < this.detailListView.length; i++) {
						if (decQty1 <= 0) {
							break;
						}
						let tmpMat = this.detailListView[i].matcode; //物料

						if (tmpMat != matCode) {
							continue; //如果物料、货位不是当前输入的物料、货位 继续
						}
						taskQty = parseFloat(this.detailListView[i].qty);
						tmpQty = parseFloat(this.detailListView[i].goodqty);
						inTaskItemid = this.detailListView[i].arrivalsDetailid;

						if (taskQty == tmpQty) {
							continue;
						}

						if (!this.dicMtlQty.has(inTaskItemid)) {
							let ls21 = [];
							ls21[0] = tmpQty;
							ls21[1] = '0';
							ls21[2] = tmpMat;
							this.dicMtlQty.set(inTaskItemid, ls21);
						}

						if (taskQty - tmpQty >= decQty1) {
							//表示足够扣
							/* this.detailListView[i].goodqty = tmpQty + decQty1; */

							var cc2 = this.detailListView[i];
							cc2.goodqty = tmpQty + decQty1;
							this.$set(this.detailListView, i, cc2);

							let ls2 = this.dicMtlQty.get(inTaskItemid);
							ls2[1] = taskQty;
							this.dicMtlQty.set(inTaskItemid, ls2);

							let set2 = [];
							set2[0] = taskQty;
							set2[1] = tmpQty + decQty1;
							dicMtlOperatin.set(inTaskItemid, set2); //第一笔存物料计划数

							decQty1 = 0;
							exsitFlag = true;
						} else {
							decQty1 = decQty1 - (taskQty - tmpQty); //本次扫描数量- 计划剩余数量
							/* this.detailListView[i].goodqty = taskQty; */

							var cc1 = this.detailListView[i];
							cc1.goodqty = taskQty;
							this.$set(this.detailListView, i, cc1);

							let ls3 = this.dicMtlQty.get(inTaskItemid);
							ls3[1] = taskQty;
							this.dicMtlQty.set(inTaskItemid, ls3);

							let set3 = [];
							set3[0] = taskQty;
							set3[1] = taskQty - tmpQty;
							dicMtlOperatin.set(inTaskItemid, set3); //第一笔存物料计划数
						}
					}

					if (!exsitFlag && decQty1 != qty) {
						uni.showModal({
							title: '采集异常',
							showCancel: false,
							content: '采集物料批号序列号信息匹配任务明细失败'
						});
						this.$set(this.scanningContent, 'text', '');
						return;
					}

					if (stockx.sn != '' && stockx.sn != null && stockx.sn != undefined && !this.dicSeq.has(matCode + '@' + sn)) {
						this.dicSeq.set(matCode + '@' + stockx.sn, matCode + '@' + stockx.sn);
					}
					//添加采集记录;对于采集记录的修改操作统一在采集明细中操作
					this.taskcollAdd(matCode);
					this.AddCollectData(matCode, stockx.batchno, stockx.sn, taskQty, stockx.collectQty, null, null, null, dicMtlOperatin, collectFlg, pdate, vdays);
				}
			}
		},

		AddCollectData(matCode, batchNo, sn, taskQty, collectQty, storeRoom, storeSite, taskid, dicMtlOperatin, collectFlg, pdate, vdays) {
			for (let [key, value] of dicMtlOperatin) {
				//console.log(key + ' = ' + value);
				let stock = {};
				stock.stockid = uuid();
				stock.matcode = matCode;
				stock.batchno = batchNo;
				stock.sn = sn;
				stock.taskQty = value[0]; //计划数
				stock.collectQty = value[1]; //本次采集数量
				stock.arrivalsDetailid = key;
				stock.arrivalsBillid = taskid;
				stock.storeRoom = storeRoom;
				stock.storeSite = '';
				stock.collectFlg = collectFlg;
				stock.pdate = pdate;
				stock.vdays = vdays;
				this.stocks.push(stock);
			}
		},
		commitButton_Click() {
			if (this.stocks.length == 0) {
				uni.showModal({
					title: '提交异常',
					showCancel: false,
					content: '本次无采集明细，请确认！'
				});
				return;
			}
			let tmpMat = '';
			let taskQty1 = 0;
			let tmpQty1 = 0;
			let msg = '';
			let tmpStore = '';

			for (let ii = 0; ii < this.detailListView.length; ii++) {
				tmpMat = this.detailListView[ii].matcode.toString(); //物料
				/* tmpStore = detailListView[ii].matcode.toString(); //库位 */
				taskQty1 = parseFloat(this.detailListView[ii].qty);
				tmpQty1 = parseFloat(this.detailListView[ii].goodqty);
				if (taskQty1 != tmpQty1) {
					msg += '物料【' + tmpMat + '】还剩【' + (taskQty1 - tmpQty1) + '】未做';
					break;
				}
			}

			if (msg != '') {
				msg += '，请确认是否提交？';
			} else {
				msg = '请确认是否提交？';
			}

			uni.showModal({
				title: '提交确认',
				content: msg,
				success: (res) => {
					if (res.confirm) {
						let filter = '';
						let dicSeqs = this.dicSeq;
						for (let [key, value] of dicSeqs) {
							filter += ",'" + value + "'";
						}
						if (filter != '' && filter != null && filter != undefined) {
							/* filter = filter.remove(0, 1); */
							filter = filter.substring(1, filter.length);
						}

						let collectStocks = this.stocks;

						let upShelvesInfosList = [];
						for (let io = 0; io < collectStocks.length; io++) {
							let upShelvesInfo = {};
							let upStock = collectStocks[io];

							upShelvesInfo.taskNo = upStock.arrivalsBillid;
							upShelvesInfo.matCode = upStock.matcode; //物料号
							upShelvesInfo.batchNo = upStock.batchno; //批号
							upShelvesInfo.sn = upStock.sn; //序列号
							upShelvesInfo.taskQty = upStock.taskQty; //任务数量
							upShelvesInfo.collectQty = upStock.collectQty; //已采集数量
							upShelvesInfo.storeRoomNo = upStock.storeRoom;
							upShelvesInfo.storeSiteNo = upStock.storeSite;
							upShelvesInfo.taskid = upStock.arrivalsBillid;
							upShelvesInfo.inTaskItemid = upStock.arrivalsDetailid;
							upShelvesInfo.matchingFlg = upStock.collectFlg;
							upShelvesInfo.data1 = upStock.pdate;
							upShelvesInfo.data2 = upStock.vdays;
							upShelvesInfosList.push(upShelvesInfo);
						}

						let lsItems = [];
						let dicMtlQtys = this.dicMtlQty;
						for (let [key, value] of dicMtlQtys) {
							let itemListInfo = {};
							let mtlQty = [];
							mtlQty[0] = value[0];
							mtlQty[1] = value[1];
							itemListInfo.mtlQty = mtlQty;

							itemListInfo.inTaskItemid = key;
							itemListInfo.mtlCode = value[2];

							lsItems.push(itemListInfo);
						}
						/* let upShelvesInfos = JSON.stringify(upShelvesInfosList); */

						CommitSignShelves(upShelvesInfosList, lsItems, filter).then((response) => {
							uni.showModal({
								title: '信息提示',
								showCancel: false,
								content: '提交成功'
							});

							uni.setStorage({
								key: 'stocks',
								data: null, //未修改
								success: function () {
									//console.log('采集结果初始化');
								}
							});
							uni.setStorage({
								key: 'updateflag',
								data: '0',
								success: function () {
									//console.log('采集状态修改标志初始化');
								}
							});
							uni.setStorage({
								key: 'SignDetailList',
								data: null,
								success: function () {
									//console.log('采集任务初始化');
								}
							});

							uni.$off('scancodedate');
							uni.reLaunch({
								url: '/pages/arrive_sign/index' // 你可以根据需要调整跳转的页面
							});
						});
					} else {
						return;
					}
				}
			});
		},
		checkIntAndFloat(source) {
			var regex = /^[0-9]+(\.[0-9]+)?$/g;
			return regex.test(source);
		},
		//导航栏初始化事件
		init(e) {
			this.height = Math.ceil((e.height / e.windowWidth) * 750);
		},
		//导航栏点击事件
		onClick(e) {
			//console.log(e);
			if (e.index === 0) {
				this.actionsClick('collect_detail');
			}
			if (e.index === 1) {
				this.commitButton_Click();
			} else {
			}
		},
		//进入采集结果界面
		actionsClick(url) {
			setTimeout(() => {
				uni.navigateTo({
					url: url
				});
			}, 100);
		}
	}
};
</script>

<style lang="scss">
.table_hide {
	width: 100%;
	height: 0rpx;
}
</style>
